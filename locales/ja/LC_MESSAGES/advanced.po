# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025
# This file is distributed under the same license as the Scientific Python Lectures package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Tetsuo Koyama <tkoyama010@gmail.com>, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Scientific Python Lectures 2025.1rc0.dev0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-29 00:12+0000\n"
"PO-Revision-Date: 2024-11-27 19:15+0000\n"
"Last-Translator: Tetsuo Koyama <tkoyama010@gmail.com>, 2025\n"
"Language-Team: Japanese (https://app.transifex.com/tkoyama010/teams/202028/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../scientific-python-lectures/advanced/advanced_numpy/auto_examples/index.rst:4
msgid "Examples for the advanced NumPy chapter"
msgstr "高度なNumPyの章の例"

#: ../../scientific-python-lectures/advanced/advanced_numpy/auto_examples/index.rst:23
msgid ""
":ref:`sphx_glr_advanced_advanced_numpy_auto_examples_plot_maskedstats.py`"
msgstr ""
":ref:`sphx_glr_advanced_advanced_numpy_auto_examples_plot_maskedstats.py`"

#: ../../scientific-python-lectures/advanced/advanced_numpy/auto_examples/index.rst:50
msgid ""
":download:`Download all examples in Python source code: "
"auto_examples_python.zip "
"</advanced/advanced_numpy/auto_examples/auto_examples_python.zip>`"
msgstr ""
":download:`Download all examples in Python source code: "
"auto_examples_python.zip "
"</advanced/advanced_numpy/auto_examples/auto_examples_python.zip>`"

#: ../../scientific-python-lectures/advanced/advanced_numpy/auto_examples/index.rst:54
msgid ""
":download:`Download all examples in Jupyter notebooks: "
"auto_examples_jupyter.zip "
"</advanced/advanced_numpy/auto_examples/auto_examples_jupyter.zip>`"
msgstr ""
":download:`Download all examples in Jupyter notebooks: "
"auto_examples_jupyter.zip "
"</advanced/advanced_numpy/auto_examples/auto_examples_jupyter.zip>`"

#: ../../../../../../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:474
#: ../../../../../../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:240
#: ../../scientific-python-lectures/advanced/advanced_numpy/auto_examples/index.rst:61
#: ../../scientific-python-lectures/advanced/advanced_numpy/auto_examples/plot_maskedstats.rst:69
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:475
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_GMM.rst:102
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_block_mean.rst:74
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_blur.rst:78
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_clean_morpho.rst:102
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_denoising.rst:93
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_display_face.rst:77
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_face.rst:66
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_face_denoise.rst:88
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_face_tv_denoise.rst:91
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_find_edges.rst:101
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_find_object.rst:90
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_geom_face.rst:92
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_granulo.rst:107
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_greyscale_dilation.rst:88
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_histo_segmentation.rst:95
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_interpolation_face.rst:73
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_measure_data.rst:91
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_numpy_array.rst:77
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_propagation.rst:84
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_radial_mean.rst:76
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_sharpen.rst:82
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_spectral_clustering.rst:122
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_synthetic_data.rst:86
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_watershed_segmentation.rst:92
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:241
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_1d_optim.rst:115
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_compare_optimizers.rst:153
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_constraints.rst:114
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_convex.rst:94
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_curve_fitting.rst:84
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_exercise_flat_minimum.rst:120
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_exercise_ill_conditioned.rst:145
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_gradient_descent.rst:361
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_noisy.rst:80
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_non_bounds_constraints.rst:107
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_smooth.rst:82
msgid ""
"`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"
msgstr ""
"`Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_"

#: ../../../../../../../tmp/<rst_epilog>:9
msgid "|clear-floats|"
msgstr "|clear-floats|"

#: ../../scientific-python-lectures/advanced/advanced_numpy/auto_examples/plot_maskedstats.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_advanced_numpy_auto_examples_plot_maskedstats.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/auto_examples/plot_maskedstats.rst:22
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst-1
msgid "Example: Masked statistics"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/auto_examples/plot_maskedstats.rst:24
msgid "Plot a masked statistics"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/auto_examples/plot_maskedstats.rst:54
msgid ""
":download:`Download Jupyter notebook: plot_maskedstats.ipynb "
"<plot_maskedstats.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_maskedstats.ipynb "
"<plot_maskedstats.ipynb>`"

#: ../../scientific-python-lectures/advanced/advanced_numpy/auto_examples/plot_maskedstats.rst:58
msgid ""
":download:`Download Python source code: plot_maskedstats.py "
"<plot_maskedstats.py>`"
msgstr ""
":download:`Download Python source code: plot_maskedstats.py "
"<plot_maskedstats.py>`"

#: ../../scientific-python-lectures/advanced/advanced_numpy/auto_examples/plot_maskedstats.rst:62
msgid ""
":download:`Download zipped: plot_maskedstats.zip <plot_maskedstats.zip>`"
msgstr ""
":download:`Download zipped: plot_maskedstats.zip <plot_maskedstats.zip>`"

#: ../../scientific-python-lectures/advanced/advanced_numpy/auto_examples/sg_execution_times.rst:8
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:8
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:8
msgid "Computation times"
msgstr "計算時間"

#: ../../scientific-python-lectures/advanced/advanced_numpy/auto_examples/sg_execution_times.rst:9
msgid ""
"**00:00.000** total execution time for 1 file **from "
"advanced/advanced_numpy/auto_examples**:"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/auto_examples/sg_execution_times.rst:32
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:32
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:121
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:269
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:434
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:662
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:32
msgid "Example"
msgstr "例"

#: ../../scientific-python-lectures/advanced/advanced_numpy/auto_examples/sg_execution_times.rst:33
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:33
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:33
msgid "Time"
msgstr "時間"

#: ../../scientific-python-lectures/advanced/advanced_numpy/auto_examples/sg_execution_times.rst:34
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:34
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:34
msgid "Mem (MB)"
msgstr "Mem (MB)"

#: ../../scientific-python-lectures/advanced/advanced_numpy/auto_examples/sg_execution_times.rst:35
msgid ""
":ref:`sphx_glr_advanced_advanced_numpy_auto_examples_plot_maskedstats.py` "
"(``plot_maskedstats.py``)"
msgstr ""
":ref:`sphx_glr_advanced_advanced_numpy_auto_examples_plot_maskedstats.py` "
"(``plot_maskedstats.py``)"

#: ../../scientific-python-lectures/advanced/advanced_numpy/auto_examples/sg_execution_times.rst:36
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:36
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:39
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:42
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:45
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:48
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:51
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:54
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:57
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:60
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:63
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:66
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:69
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:72
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:75
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:78
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:81
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:84
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:87
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:90
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:93
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:96
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:99
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:102
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:105
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:36
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:39
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:42
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:45
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:48
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:51
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:54
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:57
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:60
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:63
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:66
msgid "00:00.000"
msgstr "00:00.000"

#: ../../scientific-python-lectures/advanced/advanced_numpy/auto_examples/sg_execution_times.rst:37
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:37
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:40
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:43
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:46
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:49
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:52
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:55
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:58
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:61
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:64
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:67
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:70
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:73
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:76
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:79
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:82
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:85
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:88
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:91
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:94
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:97
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:100
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:103
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:106
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:37
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:40
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:43
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:46
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:49
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:52
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:55
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:58
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:61
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:64
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:67
msgid "0.0"
msgstr "0.0"

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:11
msgid "Advanced NumPy"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:13
msgid "**Author**: *Pauli Virtanen*"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:15
msgid ""
"NumPy is at the base of Python's scientific stack of tools. Its purpose to "
"implement efficient operations on many items in a block of memory. "
"Understanding how it works in detail helps in making efficient use of its "
"flexibility, taking useful shortcuts."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:20
msgid "This section covers:"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:22
msgid "Anatomy of NumPy arrays, and its consequences. Tips and tricks."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:25
msgid "Universal functions: what, why, and what to do if you want a new one."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:28
msgid ""
"Integration with other tools: NumPy offers several ways to wrap any data in "
"an ndarray, without unnecessary copies."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:31
msgid ""
"Recently added features, and what's in them: PEP 3118 buffers, generalized "
"ufuncs, ..."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:11
#: ../../scientific-python-lectures/advanced/debugging/index.rst:5
#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:9
#: ../../scientific-python-lectures/advanced/optimizing/index.rst:5
#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:58
msgid "Prerequisites"
msgstr "前提条件"

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:38
#: ../../scientific-python-lectures/advanced/debugging/index.rst:17
msgid "NumPy"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:39
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:622
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:829
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:908
msgid "Cython"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:40
msgid "Pillow (Python imaging library, used in a couple of examples)"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:44
#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:35
#: ../../scientific-python-lectures/advanced/debugging/index.rst:26
msgid "Chapter contents"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:48
msgid "In this section, NumPy will be imported as follows::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:54
msgid "Life of ndarray"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:57
msgid "It's..."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:59
msgid "**ndarray** ="
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:61
msgid "block of memory + indexing scheme + data type descriptor"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:63
msgid "raw data"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:64
msgid "how to locate an element"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:65
msgid "how to interpret an element"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:93
msgid "Block of memory"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:101
msgid "Memory address of the data:"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:106
msgid "The whole ``__array_interface__``:"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:111
msgid "Reminder: two :class:`ndarrays <ndarray>` may share the same memory::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:119
msgid "Memory does not need to be owned by an :class:`ndarray`::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:123
msgid ""
"x is a string (in Python 3 a bytes), we can represent its data as an array "
"of ints::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:141
msgid ""
"The ``owndata`` and ``writeable`` flags indicate status of the memory block."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:144
msgid ""
"`array interface "
"<https://numpy.org/doc/stable/reference/arrays.interface.html>`_"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:147
msgid "Data types"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:150
msgid "The descriptor"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:152
msgid ":class:`dtype` describes a single item in the array:"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:155
msgid "type"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:155
msgid "**scalar type** of the data, one of:"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:157
msgid "int8, int16, float64, *et al.*  (fixed size)"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:159
msgid "str, unicode, void   (flexible size)"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:161
msgid "itemsize"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:161
msgid "**size** of the data block"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:162
msgid "byteorder"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:162
msgid ""
"**byte order**: big-endian ``>`` / little-endian ``<`` / not applicable "
"``|``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:163
msgid "fields"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:163
msgid "sub-dtypes, if it's a **structured data type**"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:164
msgid "shape"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:164
msgid "shape of the array, if it's a **sub-array**"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:176
msgid "Example: reading ``.wav`` files"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:178
msgid "The ``.wav`` file header:"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:181
msgid "chunk_id"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:181
msgid "``\"RIFF\"``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:182
msgid "chunk_size"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:182
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:185
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:188
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:189
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:193
msgid "4-byte unsigned little-endian integer"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:183
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:69
msgid "format"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:183
msgid "``\"WAVE\"``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:184
msgid "fmt_id"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:184
msgid "``\"fmt \"``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:185
msgid "fmt_size"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:186
msgid "audio_fmt"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:186
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:187
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:190
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:191
msgid "2-byte unsigned little-endian integer"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:187
msgid "num_channels"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:188
msgid "sample_rate"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:189
msgid "byte_rate"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:190
msgid "block_align"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:191
msgid "bits_per_sample"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:192
msgid "data_id"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:192
msgid "``\"data\"``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:193
msgid "data_size"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:196
msgid "44-byte block of raw data (in the beginning of the file)"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:197
msgid "... followed by ``data_size`` bytes of actual sound data."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:199
msgid "The ``.wav`` file header as a NumPy *structured* data type::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:220
msgid "wavreader.py"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:231
msgid ""
"The first element is the sub-dtype in the structured data, corresponding to "
"the name ``format``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:234
msgid "The second one is its offset (in bytes) from the beginning of the item"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst-1
msgid "Exercise"
msgstr "例題"

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:239
msgid ""
"Mini-exercise, make a \"sparse\" dtype by using offsets, and only some of "
"the fields::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:248
msgid "and use that to read the sample rate, and ``data_id`` (as sub-array)."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:258
msgid "Let's try accessing the sub-array:"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:269
msgid "When accessing sub-arrays, the dimensions get added to the end!"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:273
msgid ""
"There are existing modules such as ``wavfile``, ``audiolab``, etc. for "
"loading sound data..."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:278
msgid "Casting and re-interpretation/views"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:280
msgid "**casting**"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:282
msgid "on assignment"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:283
msgid "on array construction"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:284
msgid "on arithmetic"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:285
msgid "etc."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:286
msgid "and manually: ``.astype(dtype)``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:288
msgid "**data re-interpretation**"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:290
msgid "manually: ``.view(dtype)``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:294
msgid "Casting"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:296
msgid "Casting in arithmetic, in nutshell:"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:298
msgid "only type (not value!) of operands matters"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:300
msgid "largest \"safe\" type able to represent both is picked"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:302
msgid "scalars can \"lose\" to arrays in some situations"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:304
msgid "Casting in general copies data::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:323
msgid ""
"Casting on setitem: dtype of the array is not changed on item assignment::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:331
msgid ""
"Exact rules: see `NumPy documentation "
"<https://numpy.org/doc/stable/reference/ufuncs.html#casting-rules>`_"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:336
msgid "Re-interpretation / viewing"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:338
msgid "Data block in memory (4 bytes)"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:341
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:363
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:379
msgid "``0x01``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:341
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:363
msgid "||"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:341
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:363
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:379
msgid "``0x02``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:341
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:363
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:379
msgid "``0x03``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:341
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:363
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:379
msgid "``0x04``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:344
msgid "4 of uint8, OR,"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:345
msgid "4 of int8, OR,"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:346
msgid "2 of int16, OR,"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:347
msgid "1 of int32, OR,"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:348
msgid "1 of float32, OR,"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:349
#: ../../scientific-python-lectures/advanced/image_processing/index.rst:61
#: ../../scientific-python-lectures/advanced/scipy_sparse/bsr_array.rst:14
#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:55
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:39
msgid "..."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:351
msgid "How to switch from one to another?"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:353
msgid "Switch the dtype:"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:367
msgid "little-endian: least significant byte is on the *left* in memory"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:370
msgid "Create a new view of type ``uint32``, shorthand ``i4``:"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:384
msgid "``.view()`` makes *views*, does not copy (or alter) the memory block"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:385
msgid "only changes the dtype (and adjusts array shape)::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:394
msgid "Mini-exercise: data re-interpretation"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:395
msgid "view-colors.py"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:397
msgid "You have RGBA data in an array::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:405
msgid ""
"where the last three dimensions are the R, B, and G, and alpha channels."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:407
msgid ""
"How to make a (10, 10) structured array with field names 'r', 'g', 'b', 'a' "
"without copying data? ::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:417
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:784
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:838
msgid "*Solution*"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:436
msgid "Another two arrays, each occupying exactly 4 bytes of memory:"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:447
msgid ""
"We view the elements of ``x`` (1 byte each) as ``int16`` (2 bytes each):"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:453
msgid ""
"What is happening here? Take a look at the bytes stored in memory by ``x``:"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:459
msgid "The ``\\x`` stands for heXadecimal, so what we are seeing is::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:463
msgid ""
"We ask NumPy to interpret these bytes as elements of dtype ``int16``—each of"
" which occupies *two* bytes in memory.  Therefore, ``0x01 0x03`` becomes the"
" first ``uint16`` and ``0x02 0x04`` the second."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:468
msgid ""
"You may then expect to see ``0x0103`` (259, when converting from hexadecimal"
" to decimal) as the first result. But your computer likely stores most "
"significant bytes first, and as such reads the number as ``0x0301`` or 769 "
"(go on and type `0x0301` into your Python terminal to verify)."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:474
msgid ""
"We can do the same on a copy of ``y`` (why doesn't it work on ``y`` "
"directly?):"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:481
msgid ""
"Can you explain these numbers, 513 and 1027, as well as the output shape of "
"the resulting array?"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:486
msgid "Indexing scheme: strides"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:489
msgid "Main point"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:491
msgid "**The question**::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:501
msgid "**The answer** (in NumPy)"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:503
msgid "**strides**: the number of bytes to jump to find the next element"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:504
msgid "1 stride per dimension"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:516
msgid "simple, **flexible**"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:520
msgid "C and Fortran order"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:523
msgid ""
"The Python built-in :py:class:`bytes` returns bytes in C-order by default "
"which can cause confusion when trying to inspect memory layout. We use "
":meth:`numpy.ndarray.tobytes` with ``order=A`` instead, which preserves the "
"C or F ordering of the bytes in memory."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:537
msgid "Need to jump 6 bytes to find the next row"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:538
msgid "Need to jump 2 bytes to find the next column"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:548
msgid "Need to jump 2 bytes to find the next row"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:549
msgid "Need to jump 4 bytes to find the next column"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:552
msgid "Similarly to higher dimensions:"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:554
msgid "C: last dimensions vary fastest (= smaller strides)"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:555
msgid "F: first dimensions vary fastest"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:557
msgid ""
"\\mathrm{shape} &= (d_1, d_2, ..., d_n)\n"
"\\\\\n"
"\\mathrm{strides} &= (s_1, s_2, ..., s_n)\n"
"\\\\\n"
"s_j^C &= d_{j+1} d_{j+2} ... d_{n} \\times \\mathrm{itemsize}\n"
"\\\\\n"
"s_j^F &= d_{1} d_{2} ... d_{j-1} \\times \\mathrm{itemsize}"
msgstr ""
"\\mathrm{shape} &= (d_1, d_2, ..., d_n)\n"
"\\\\\n"
"\\mathrm{strides} &= (s_1, s_2, ..., s_n)\n"
"\\\\\n"
"s_j^C &= d_{j+1} d_{j+2} ... d_{n} \\times \\mathrm{itemsize}\n"
"\\\\\n"
"s_j^F &= d_{1} d_{2} ... d_{j-1} \\times \\mathrm{itemsize}"

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:570
msgid "Now we can understand the behavior of ``.view()``:"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:575
msgid ""
"Transposition does not affect the memory layout of the data, only strides"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:587
msgid "the results are different when interpreted as 2 of int16"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:588
msgid "``.copy()`` creates new arrays in the C order (by default)"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:590
msgid "**In-place operations with views**"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:592
msgid ""
"Prior to NumPy version 1.13, in-place operations with views could result in "
"**incorrect** results for large arrays. Since :doc:`version 1.13 "
"<numpy:release/1.13.0-notes>`, NumPy includes checks for *memory overlap* to"
" guarantee that results are consistent with the non in-place version (e.g. "
"``a = a + a.T`` produces the same result as ``a += a.T``). Note however that"
" this may result in the data being copied (as if using ``a += a.T.copy()``),"
" ultimately resulting in more memory being used than might otherwise be "
"expected for in-place operations!"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:604
msgid "Slicing with integers"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:606
msgid ""
"*Everything* can be represented by changing only ``shape``, ``strides``, and"
" possibly adjusting the ``data`` pointer!"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:608
msgid "Never makes copies of the data"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:629
msgid "Similarly, transposes never make copies (it just swaps strides)::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:637
msgid ""
"But: not all reshaping operations can be represented by playing with "
"strides::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:645
msgid "So far, so good. However::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:656
msgid ""
"Here, there is no way to represent the array ``c`` given one stride and the "
"block of memory for ``a``. Therefore, the ``reshape`` operation needs to "
"make a copy here."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:663
msgid "Example: fake dimensions with strides"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:666
msgid "Stride manipulation"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:674
msgid ""
"``as_strided`` does **not** check that you stay inside the memory block "
"bounds..."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:684
msgid "stride-fakedims.py"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:686
#: ../../scientific-python-lectures/advanced/image_processing/index.rst-1
#: ../../scientific-python-lectures/advanced/image_processing/index.rst:219
#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst-1
msgid "**Exercise**"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:696
msgid "using only ``as_strided``.::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:700
msgid "*Spoiler*"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:707
msgid "Stride can also be *0*:"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:726
msgid "Broadcasting"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:728
msgid ""
"Doing something useful with it: outer product of ``[1, 2, 3, 4]`` and ``[5, "
"6, 7]``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:751
msgid "... seems somehow familiar ..."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:759
msgid ""
"Internally, array **broadcasting** is indeed implemented using 0-strides."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:763
msgid "More tricks: diagonals"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:765
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:820
msgid "stride-diagonals.py"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:767
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:822
msgid "**Challenge**"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:769
msgid "Pick diagonal entries of the matrix: (assume C memory order)::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:777
msgid "Pick the first super-diagonal entries ``[2, 6]``."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:779
msgid "And the sub-diagonals?"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:781
msgid "(Hint to the last two: slicing first moves the point where striding"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:782
msgid "starts from.)"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:791
msgid "Pick diagonals::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:797
msgid "Slice first, to adjust the data pointer::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:805
msgid "**Using np.diag**"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:811
msgid "However,"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:824
msgid "Compute the tensor trace::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:832
msgid "by striding, and using ``sum()`` on the result. ::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:857
msgid "CPU cache effects"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:859
msgid "Memory layout can affect performance:"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:881
msgid "Smaller strides are faster?"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:884
msgid "CPU pulls data from main memory to its cache in blocks"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:886
msgid ""
"If many array items consecutively operated on fit in a single block (small "
"stride):"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:888
msgid ":math:`\\Rightarrow` fewer transfers needed"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:890
msgid ":math:`\\Rightarrow` faster"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:894
msgid ""
"`numexpr <https://numexpr.readthedocs.io/projects/NumExpr3/en/latest/>`_ is "
"designed to mitigate cache effects when evaluating array expressions."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:897
msgid ""
"`numba <https://numba.pydata.org/>`_ is a compiler for Python code, that is "
"aware of numpy arrays."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:901
msgid "Findings in dissection"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:905
msgid "*memory block*: may be shared, ``.base``, ``.data``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:907
msgid ""
"*data type descriptor*: structured data, sub-arrays, byte order, casting, "
"viewing, ``.astype()``, ``.view()``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:910
msgid ""
"*strided indexing*: strides, C/F-order, slicing w/ integers, ``as_strided``,"
" broadcasting, stride tricks, ``diag``, CPU cache coherence"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:916
msgid "Universal functions"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:919
msgid "What they are?"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:921
msgid "Ufunc performs and elementwise operation on all elements of an array."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:923
msgid "Examples::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:927
msgid "Automatically support: broadcasting, casting, ..."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:929
msgid ""
"The author of an ufunc only has to supply the elementwise operation, NumPy "
"takes care of the rest."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:932
msgid ""
"The elementwise operation needs to be implemented in C (or, e.g., Cython)"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:936
msgid "Parts of an Ufunc"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:938
msgid "Provided by user"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:963
msgid "The NumPy part, built by"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:985
msgid ""
"A ufunc can also support multiple different input-output type combinations."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:989
msgid "Making it easier"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:991
msgid ""
"``ufunc_loop`` is of very generic form, and NumPy provides pre-made ones"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:995
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1042
msgid "``PyUfunc_f_f``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:995
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1042
msgid "``float elementwise_func(float input_1)``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:996
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1043
msgid "``PyUfunc_ff_f``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:996
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1043
msgid "``float elementwise_func(float input_1, float input_2)``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:997
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1044
msgid "``PyUfunc_d_d``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:997
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1044
msgid "``double elementwise_func(double input_1)``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:998
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1045
msgid "``PyUfunc_dd_d``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:998
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1045
msgid "``double elementwise_func(double input_1, double input_2)``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:999
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1046
msgid "``PyUfunc_D_D``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:999
msgid "``elementwise_func(npy_cdouble *input, npy_cdouble* output)``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1000
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1047
msgid "``PyUfunc_DD_D``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1000
msgid ""
"``elementwise_func(npy_cdouble *in1, npy_cdouble *in2, npy_cdouble* out)``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1003
msgid "Only ``elementwise_func`` needs to be supplied"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1005
msgid ""
"... except when your elementwise function is not in one of the above forms"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1008
msgid "Exercise: building an ufunc from scratch"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1010
msgid "The Mandelbrot fractal is defined by the iteration"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1012
msgid "z \\leftarrow z^2 + c"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1016
msgid ""
"where :math:`c = x + i y` is a complex number. This iteration is repeated --"
" if :math:`z` stays finite no matter how long the iteration runs, :math:`c` "
"belongs to the Mandelbrot set."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1020
msgid "Make ufunc called ``mandel(z0, c)`` that computes::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1026
msgid ""
"say, 100 iterations or until ``z.real**2 + z.imag**2 > 1000``. Use it to "
"determine which `c` are in the Mandelbrot set."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1029
msgid ""
"Our function is a simple one, so make use of the ``PyUFunc_*`` helpers."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1031
msgid "Write it in Cython"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1033
msgid "mandel.pyx, mandelplot.py"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1039
msgid "Reminder: some pre-made Ufunc loops:"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1046
msgid "``elementwise_func(complex_double *input, complex_double* output)``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1047
msgid ""
"``elementwise_func(complex_double *in1, complex_double *in2, complex_double*"
" out)``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1050
msgid "Type codes::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1059
msgid "Solution: building an ufunc from scratch"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1071
msgid "Most of the boilerplate could be automated by these Cython modules:"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1073
msgid "https://github.com/cython/cython/wiki/MarkLodato-CreatingUfuncs"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1076
msgid "Several accepted input types"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1077
msgid "E.g. supporting both single- and double-precision versions"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1123
msgid "Generalized ufuncs"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1125
msgid "**ufunc**"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1127
msgid "``output = elementwise_function(input)``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1129
msgid "Both ``output`` and ``input`` can be a single array element only."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1131
msgid "**generalized ufunc**"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1133
msgid ""
"``output`` and ``input`` can be arrays with a fixed number of dimensions"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1135
msgid "For example, matrix trace (sum of diag elements)::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1142
msgid "Matrix product::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1150
msgid "This is called the *\"signature\"* of the generalized ufunc"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1151
msgid "The dimensions on which the g-ufunc acts, are *\"core dimensions\"*"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1154
msgid "Status in NumPy"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1155
msgid "g-ufuncs are in NumPy already ..."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1156
msgid "new ones can be created with ``PyUFunc_FromFuncAndDataAndSignature``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1157
msgid ""
"most linear-algebra functions are implemented as g-ufuncs to enable working "
"with stacked arrays::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1167
msgid ""
"matrix multiplication this way could be useful for operating on many small "
"matrices at once"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1170
msgid "Also see ``tensordot`` and ``einsum``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1193
msgid "Generalized ufunc loop"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1194
msgid "Matrix multiplication ``(m,n),(n,p) -> (m,p)``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1229
msgid "Interoperability features"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1232
msgid "Sharing multidimensional, typed data"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1234
msgid "Suppose you"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1236
msgid "Write a library than handles (multidimensional) binary data,"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1238
msgid ""
"Want to make it easy to manipulate the data with NumPy, or whatever other "
"library,"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1241
msgid "... but would **not** like to have NumPy as a dependency."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1243
msgid "Currently, 3 solutions:"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1245
msgid "the \"old\" buffer interface"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1247
msgid "the array interface"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1249
msgid "the \"new\" buffer interface (:pep:`3118`)"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1253
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1278
msgid "The old buffer protocol"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1255
msgid "Only 1-D buffers"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1256
msgid "No data type information"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1257
msgid "C-level interface; ``PyBufferProcs tp_as_buffer`` in the type object"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1258
msgid "But it's integrated into Python  (e.g. strings support it)"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1260
msgid ""
"Mini-exercise using `Pillow <https://python-pillow.org/>`_ (Python Imaging "
"Library):"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1263
msgid "pilbuffer.py"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1273
msgid "**Q:**"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1275
msgid ""
"Check what happens if ``data`` is now modified, and ``img`` saved again."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1289
msgid "Array interface protocol"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1291
msgid "Multidimensional buffers"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1292
msgid "Data type information present"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1293
msgid "NumPy-specific approach; slowly deprecated (but not going away)"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1294
msgid "Not integrated in Python otherwise"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1298
msgid ""
"Documentation: https://numpy.org/doc/stable/reference/arrays.interface.html"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1323
msgid "::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1338
msgid "A more C-friendly variant of the array interface is also defined."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1343
msgid "Array siblings: :class:`chararray`, :class:`maskedarray`"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1346
msgid ":class:`chararray`: vectorized string operations"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1356
msgid ":class:`masked_array` missing data"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1358
msgid "Masked arrays are arrays that may have missing or invalid entries."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1360
msgid ""
"For example, suppose we have an array where the fourth entry is invalid::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1364
msgid "One way to describe this is to create a masked array::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1372
msgid "Masked mean ignores masked data::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1379
msgid ""
"Not all NumPy functions respect masks, for instance ``np.dot``, so check the"
" return types."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1382
msgid "The ``masked_array`` returns a **view** to the original array::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1389
msgid "The mask"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1391
msgid "You can modify the mask by assigning::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1400
msgid "The mask is cleared on assignment::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1409
msgid "The mask is also available directly::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1414
msgid ""
"The masked entries can be filled with a given value to get an usual array "
"back::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1421
msgid "The mask can also be cleared::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1431
msgid "Domain-aware functions"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1433
msgid "The masked array package also contains domain-aware functions::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1443
msgid ""
"Streamlined and more seamless support for dealing with missing data in "
"arrays is making its way into NumPy 1.7.  Stay tuned!"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1448
msgid ""
"Canadian rangers were distracted when counting hares and lynxes in 1903-1910"
" and 1917-1918, and got the numbers are wrong. (Carrot farmers stayed alert,"
" though.)  Compute the mean populations over time, ignoring the invalid "
"numbers. ::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1474
msgid "Note that Matplotlib knows about masked arrays::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1486
msgid ":class:`recarray`: purely convenience"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1497
#: ../../scientific-python-lectures/advanced/advanced_python/index.rst-1
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:817
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:63
msgid "Summary"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1499
msgid "Anatomy of the ndarray: data, dtype, strides."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1501
msgid "Universal functions: elementwise operations, how to make new ones"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1503
msgid "Ndarray subclasses"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1505
msgid "Various buffer interfaces for integration with other tools"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1507
msgid "Recent additions: PEP 3118, generalized ufuncs"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1511
msgid "Contributing to NumPy/SciPy"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1513
msgid "Get this tutorial: https://www.euroscipy.org/talk/882"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1516
msgid "Why"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1518
msgid "\"There's a bug?\""
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1520
msgid "\"I don't understand what this is supposed to do?\""
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1522
msgid "\"I have this fancy code. Would you like to have it?\""
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1524
msgid "\"I'd like to help! What can I do?\""
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1527
msgid "Reporting bugs"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1529
msgid "Bug tracker (prefer **this**)"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1531
msgid "https://github.com/numpy/numpy/issues"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1533
msgid "https://github.com/scipy/scipy/issues"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1535
msgid "Click the \"Sign up\" link to get an account"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1537
msgid "Mailing lists (https://numpy.org/community/)"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1539
msgid "If you're unsure"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1541
msgid "No replies in a week or so? Just file a bug ticket."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1545
msgid "Good bug report"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1574
msgid "What are you trying to do?"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1576
msgid "**Small code snippet reproducing the bug** (if possible)"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1578
msgid "What actually happens"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1580
msgid "What you'd expect"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1582
msgid "Platform (Windows / Linux / OSX, 32/64 bits, x86/PPC, ...)"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1584
msgid "Version of NumPy/SciPy"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1589
msgid "**Check that the following is what you expect**"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1594
msgid "In case you have old/broken NumPy installations lying around."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1596
msgid ""
"If unsure, try to remove existing NumPy installations, and reinstall..."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1599
msgid "Contributing to documentation"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1601
msgid "Documentation editor"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1603
#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1632
msgid "https://numpy.org/doc/stable/"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1605
#: ../../scientific-python-lectures/advanced/image_processing/index.rst:59
msgid "Registration"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1607
msgid "Register an account"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1609
msgid "Subscribe to ``scipy-dev`` mailing list  (subscribers-only)"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1611
msgid "Problem with mailing lists: you get mail"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1613
msgid "But: **you can turn mail delivery off**"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1615
msgid "\"change your subscription options\", at the bottom of"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1617
msgid "https://mail.python.org/mailman3/lists/scipy-dev.python.org/"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1619
msgid "Send a mail @ ``scipy-dev`` mailing list; ask for activation::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1630
msgid "Check the style guide:"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1634
msgid "Don't be intimidated; to fix a small thing, just fix it"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1636
msgid "Edit"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1638
msgid "Edit sources and send patches (as for bugs)"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1640
msgid "Complain on the mailing list"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1644
msgid "Contributing features"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1646
msgid ""
"The contribution of features is documented on "
"https://numpy.org/doc/stable/dev/"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1649
msgid "How to help, in general"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1651
msgid "Bug fixes always welcome!"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1653
msgid "What irks you most"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1654
msgid "Browse the tracker"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1656
msgid "Documentation work"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1658
msgid "API docs: improvements to docstrings"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1660
msgid "Know some SciPy module well?"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1662
msgid "*User guide*"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1664
msgid "https://numpy.org/doc/stable/user/"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1666
msgid "Ask on communication channels:"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1668
msgid "``numpy-discussion`` list"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_numpy/index.rst:1669
msgid "``scipy-dev`` list"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:7
msgid "Advanced Python Constructs"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:9
msgid "**Author** *Zbigniew Jędrzejewski-Szmek*"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:11
msgid ""
"This section covers some features of the Python language which can be "
"considered advanced --- in the sense that not every language has them, and "
"also in the sense that they are more useful in more complicated programs or "
"libraries, but not in the sense of being particularly specialized, or "
"particularly complicated."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:17
msgid ""
"It is important to underline that this chapter is purely about the language "
"itself --- about features supported through special syntax complemented by "
"functionality of the Python stdlib, which could not be implemented through "
"clever external modules."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:22
msgid ""
"The process of developing the Python programming language, its syntax, is "
"very transparent; proposed changes are evaluated from various angles and "
"discussed via *Python Enhancement Proposals* --- PEPs_. As a result, "
"features described in this chapter were added after it was shown that they "
"indeed solve real problems and that their use is as simple as possible."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:38
msgid "Iterators, generator expressions and generators"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:41
msgid "Iterators"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst-1
msgid "Simplicity"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:45
msgid ""
"Duplication of effort is wasteful, and replacing the various home-grown "
"approaches with a standard feature usually ends up making things more "
"readable, and interoperable as well."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:49
msgid "*Guido van Rossum* --- `Adding Optional Static Typing to Python`_"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:55
msgid ""
"An iterator is an object adhering to the `iterator protocol`_ --- basically "
"this means that it has a `next <iterator.next>` method, which, when called, "
"returns the next item in the sequence, and when there's nothing to return, "
"raises the `StopIteration <exceptions.StopIteration>` exception."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:63
msgid ""
"An iterator object allows to loop just once. It holds the state (position) "
"of a single iteration, or from the other side, each loop over a sequence "
"requires a single iterator object. This means that we can iterate over the "
"same sequence more than once concurrently. Separating the iteration logic "
"from the sequence allows us to have more than one way of iteration."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:70
msgid ""
"Calling the `__iter__ <object.__iter__>` method on a container to create an "
"iterator object is the most straightforward way to get hold of an iterator. "
"The `iter` function does that for us, saving a few keystrokes. ::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:95
msgid ""
"When used in a loop, `StopIteration <exceptions.StopIteration>` is swallowed"
" and causes the loop to finish. But with explicit invocation, we can see "
"that once the iterator is exhausted, accessing it raises an exception."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:100
msgid ""
"Using the :compound:`for..in <for>` loop also uses the ``__iter__`` method. "
"This allows us to transparently start the iteration over a sequence. But if "
"we already have the iterator, we want to be able to use it in an ``for`` "
"loop in the same way. In order to achieve this, iterators in addition to "
"``next`` are also required to have a method called ``__iter__`` which "
"returns the iterator (``self``)."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:107
msgid ""
"Support for iteration is pervasive in Python: all sequences and unordered "
"containers in the standard library allow this. The concept is also stretched"
" to other things: e.g. ``file`` objects support iteration over lines."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:117
msgid ""
"The ``file`` is an iterator itself and it's ``__iter__`` method doesn't "
"create a separate object: only a single thread of sequential access is "
"allowed."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:122
msgid "Generator expressions"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:124
msgid ""
"A second way in which iterator objects are created is through **generator "
"expressions**, the basis for **list comprehensions**. To increase clarity, a"
" generator expression must always be enclosed in parentheses or an "
"expression. If round parentheses are used, then a generator iterator is "
"created.  If rectangular parentheses are used, the process is short-"
"circuited and we get a ``list``. ::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:138
msgid ""
"The list comprehension syntax also extends to **dictionary and set "
"comprehensions**. A ``set`` is created when the generator expression is "
"enclosed in curly braces. A ``dict`` is created when the generator "
"expression contains \"pairs\" of the form ``key:value``::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:149
msgid ""
"One *gotcha* should be mentioned: in old Pythons the index variable (``i``) "
"would leak, and in versions >= 3 this is fixed."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst-1
#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:153
msgid "Generators"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:157
msgid ""
"A generator is a function that produces a sequence of results instead of a "
"single value."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:160
msgid "*David Beazley* --- `A Curious Course on Coroutines and Concurrency`_"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:165
msgid ""
"A third way to create iterator objects is to call a generator function. A "
"**generator** is a function containing the keyword :simple:`yield`. It must "
"be noted that the mere presence of this keyword completely changes the "
"nature of the function: this ``yield`` statement doesn't have to be invoked,"
" or even reachable, but causes the function to be marked as a generator. "
"When a normal function is called, the instructions contained in the body "
"start to be executed. When a generator is called, the execution stops before"
" the first instruction in the body. An invocation of a generator function "
"creates a generator object, adhering to the iterator protocol. As with "
"normal function invocations, concurrent and recursive invocations are "
"allowed."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:177
msgid ""
"When ``next`` is called, the function is executed until the first ``yield``."
" Each encountered ``yield`` statement gives a value becomes the return value"
" of ``next``. After executing the ``yield`` statement, the execution of this"
" function is suspended. ::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:197
msgid ""
"Let's go over the life of the single invocation of the generator function. "
"::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:217
msgid ""
"Contrary to a normal function, where executing ``f()`` would immediately "
"cause the first ``print`` to be executed, ``gen`` is assigned without "
"executing any statements in the function body. Only when ``gen.__next__()`` "
"is invoked by ``next``, the statements up to the first ``yield`` are "
"executed. The second ``next`` prints ``-- finish --`` and execution halts on"
" the second ``yield``.  The third ``next`` falls of the end of the function."
" Since no ``yield`` was reached, an exception is raised."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:226
msgid ""
"What happens with the function after a yield, when the control passes to the"
" caller? The state of each generator is stored in the generator object. From"
" the point of view of the generator function, is looks almost as if it was "
"running in a separate thread, but this is just an illusion: execution is "
"strictly single-threaded, but the interpreter keeps and restores the state "
"in between the requests for the next value."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:233
msgid ""
"Why are generators useful? As noted in the parts about iterators, a "
"generator function is just a different way to create an iterator object. "
"Everything that can be done with ``yield`` statements, could also be done "
"with ``next`` methods. Nevertheless, using a function and having the "
"interpreter perform its magic to create an iterator has advantages. A "
"function can be much shorter than the definition of a class with the "
"required ``next`` and ``__iter__`` methods. What is more important, it is "
"easier for the author of the generator to understand the state which is kept"
" in local variables, as opposed to instance attributes, which have to be "
"used to pass data between consecutive invocations of ``next`` on an iterator"
" object."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:246
msgid ""
"A broader question is why are iterators useful? When an iterator is used to "
"power a loop, the loop becomes very simple. The code to initialise the "
"state, to decide if the loop is finished, and to find the next value is "
"extracted into a separate place. This highlights the body of the loop --- "
"the interesting part. In addition, it is possible to reuse the iterator code"
" in other places."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:254
msgid "Bidirectional communication"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:256
msgid ""
"Each ``yield`` statement causes a value to be passed to the caller. This is "
"the reason for the introduction of generators by :pep:`255`.  But "
"communication in the reverse direction is also useful. One obvious way would"
" be some external state, either a global variable or a shared mutable "
"object. Direct communication is possible thanks to :pep:`342`. It is "
"achieved by turning the previously boring ``yield`` statement into an "
"expression. When the generator resumes execution after a ``yield`` "
"statement, the caller can call a method on the generator object to either "
"pass a value **into** the generator, which then is returned by the ``yield``"
" statement, or a different method to inject an exception into the generator."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:269
msgid ""
"The first of the new methods is `send(value) <generator.send>`, which is "
"similar to `next() <generator.next>`, but passes ``value`` into the "
"generator to be used for the value of the ``yield`` expression. In fact, "
"``g.next()`` and ``g.send(None)`` are equivalent."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:274
msgid ""
"The second of the new methods is `throw(type, value=None, traceback=None) "
"<generator.throw>` which is equivalent to::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:280
msgid "at the point of the ``yield`` statement."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:282
msgid ""
"Unlike :simple:`raise` (which immediately raises an exception from the "
"current execution point), ``throw()`` first resumes the generator, and only "
"then raises the exception.  The word throw was picked because it is "
"suggestive of putting the exception in another location, and is associated "
"with exceptions in other languages."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:288
msgid ""
"What happens when an exception is raised inside the generator? It can be "
"either raised explicitly or when executing some statements or it can be "
"injected at the point of a ``yield`` statement by means of the ``throw()`` "
"method. In either case, such an exception propagates in the standard manner:"
" it can be intercepted by an ``except`` or ``finally`` clause, or otherwise "
"it causes the execution of the generator function to be aborted and "
"propagates in the caller."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:296
msgid ""
"For completeness' sake, it's worth mentioning that generator iterators also "
"have a `close() <generator.close>` method, which can be used to force a "
"generator that would otherwise be able to provide more values to finish "
"immediately. It allows the generator `__del__ <object.__del__>` method to "
"destroy objects holding the state of generator. Let's define a generator "
"which just prints what is passed in through send and throw. ::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:336
msgid "Chaining generators"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:340
msgid ""
"This is a preview of :pep:`380` (not yet implemented, but accepted for "
"Python 3.3)."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:343
msgid ""
"Let's say we are writing a generator and we want to yield a number of values"
" generated by a second generator, a **subgenerator**. If yielding of values "
"is the only concern, this can be performed without much difficulty using a "
"loop such as"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:354
msgid ""
"However, if the subgenerator is to interact properly with the caller in the "
"case of calls to ``send()``, ``throw()`` and ``close()``, things become "
"considerably more difficult. The ``yield`` statement has to be guarded by a "
":compound:`try..except..finally <try>` structure similar to the one defined "
"in the previous section to \"debug\" the generator function.  Such code is "
"provided in :pep:`380#id13`, here it suffices to say that new syntax to "
"properly yield from a subgenerator is being introduced in Python 3.3:"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:367
msgid ""
"This behaves like the explicit loop above, repeatedly yielding values from "
"``some_other_generator`` until it is exhausted, but also forwards ``send``, "
"``throw`` and ``close`` to the subgenerator."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:372
msgid "Decorators"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:376
msgid ""
"This amazing feature appeared in the language almost apologetically and with"
" concern that it might not be that useful."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:379
msgid "*Bruce Eckel* --- An Introduction to Python Decorators"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:381
msgid ""
"Since functions and classes are objects, they can be passed around. Since "
"they are mutable objects, they can be modified. The act of altering a "
"function or class object after it has been constructed but before is is "
"bound to its name is called decorating."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:386
msgid ""
"There are two things hiding behind the name \"decorator\" --- one is the "
"function which does the work of decorating, i.e. performs the real work, and"
" the other one is the expression adhering to the decorator syntax, i.e. an "
"at-symbol and the name of the decorating function."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:391
msgid ""
"Function can be decorated by using the decorator syntax for functions::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:398
msgid "A function is defined in the standard way. ①"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:399
msgid ""
"An expression starting with ``@`` placed before the function definition is "
"the decorator ②. The part after ``@`` must be a simple expression, usually "
"this is just the name of a function or class. This part is evaluated first, "
"and after the function defined below is ready, the decorator is called with "
"the newly defined function object as the single argument. The value returned"
" by the decorator is attached to the original name of the function."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:407
msgid ""
"Decorators can be applied to functions and to classes. For classes the "
"semantics are identical --- the original class definition is used as an "
"argument to call the decorator and whatever is returned is assigned under "
"the original name."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:412
msgid ""
"Before the decorator syntax was implemented (:pep:`318`), it was possible to"
" achieve the same effect by assigning the function or class object to a "
"temporary variable and then invoking the decorator explicitly and then "
"assigning the return value to the name of the function. This sounds like "
"more typing, and it is, and also the name of the decorated function doubling"
" as a temporary variable must be used at least three times, which is prone "
"to errors. Nevertheless, the example above is equivalent to::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:425
msgid ""
"Decorators can be stacked --- the order of application is bottom-to-top, or "
"inside-out. The semantics are such that the originally defined function is "
"used as an argument for the first decorator, whatever is returned by the "
"first decorator is used as an argument for the second decorator, ..., and "
"whatever is returned by the last decorator is attached under the name of the"
" original function."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:432
msgid ""
"The decorator syntax was chosen for its readability. Since the decorator is "
"specified before the header of the function, it is obvious that its is not a"
" part of the function body and its clear that it can only operate on the "
"whole function. Because the expression is prefixed with ``@`` is stands out "
"and is hard to miss (\"in your face\", according to the PEP :) ). When more "
"than one decorator is applied, each one is placed on a separate line in an "
"easy to read way."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:442
msgid "Replacing or tweaking the original object"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:444
msgid ""
"Decorators can either return the same function or class object or they can "
"return a completely different object. In the first case, the decorator can "
"exploit the fact that function and class objects are mutable and add "
"attributes, e.g. add a docstring to a class. A decorator might do something "
"useful even without modifying the object, for example register the decorated"
" class in a global registry. In the second case, virtually anything is "
"possible: when something different is substituted for the original function "
"or class, the new object can be completely different. Nevertheless, such "
"behaviour is not the purpose of decorators: they are intended to tweak the "
"decorated object, not do something unpredictable. Therefore, when a function"
" is \"decorated\" by replacing it with a different function, the new "
"function usually calls the original function, after doing some preparatory "
"work. Likewise, when a class is \"decorated\" by replacing if with a new "
"class, the new class is usually derived from the original class. When the "
"purpose of the decorator is to do something \"every time\", like to log "
"every call to a decorated function, only the second type of decorators can "
"be used. On the other hand, if the first type is sufficient, it is better to"
" use it, because it is simpler."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:465
msgid "Decorators implemented as classes and as functions"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:467
msgid ""
"The only *requirement* on decorators is that they can be called with a "
"single argument. This means that decorators can be implemented as normal "
"functions, or as classes with a `__call__ <object.__call__>` method, or in "
"theory, even as lambda functions."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:472
msgid ""
"Let's compare the function and class approaches. The decorator expression "
"(the part after ``@``) can be either just a name, or a call. The bare-name "
"approach is nice (less to type, looks cleaner, etc.), but is only possible "
"when no arguments are needed to customise the decorator. Decorators written "
"as functions can be used in those two cases::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:504
msgid ""
"The two trivial decorators above fall into the category of decorators which "
"return the original function. If they were to return a new function, an "
"extra level of nestedness would be required. In the worst case, three levels"
" of nested functions. ::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:530
msgid ""
"The ``_wrapper`` function is defined to accept all positional and keyword "
"arguments. In general we cannot know what arguments the decorated function "
"is supposed to accept, so the wrapper function just passes everything to the"
" wrapped function. One unfortunate consequence is that the apparent argument"
" list is misleading."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:536
msgid ""
"Compared to decorators defined as functions, complex decorators defined as "
"classes are simpler.  When an object is created, the `__init__ "
"<object.__init__>` method is only allowed to return `None`, and the type of "
"the created object cannot be changed. This means that when a decorator is "
"defined as a class, it doesn't make much sense to use the argument-less "
"form: the final decorated object would just be an instance of the decorating"
" class, returned by the constructor call, which is not very useful. "
"Therefore it's enough to discuss class-based decorators where arguments are "
"given in the decorator expression and the decorator ``__init__`` method is "
"used for decorator construction. ::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:565
msgid ""
"Contrary to normal rules (:PEP:`8`) decorators written as classes behave "
"more like functions and therefore their name often starts with a lowercase "
"letter."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:569
msgid ""
"In reality, it doesn't make much sense to create a new class just to have a "
"decorator which returns the original function. Objects are supposed to hold "
"state, and such decorators are more useful when the decorator returns a new "
"object. ::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:597
msgid ""
"A decorator like this can do pretty much anything, since it can modify the "
"original function object and mangle the arguments, call the original "
"function or not, and afterwards mangle the return value."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:602
msgid "Copying the docstring and other attributes of the original function"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:604
msgid ""
"When a new function is returned by the decorator to replace the original "
"function, an unfortunate consequence is that the original function name, the"
" original docstring, the original argument list are lost. Those attributes "
"of the original function can partially be \"transplanted\" to the new "
"function by setting ``__doc__`` (the docstring), ``__module__`` and "
"``__name__`` (the full name of the function), and ``__annotations__`` (extra"
" information about arguments and the return value of the function available "
"in Python 3). This can be done automatically by using "
"`functools.update_wrapper`."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst-1
msgid ""
"`functools.update_wrapper(wrapper, wrapped) <functools.update_wrapper>`"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:616
msgid "\"Update a wrapper function to look like the wrapped function.\""
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:642
msgid ""
"One important thing is missing from the list of attributes which can be "
"copied to the replacement function: the argument list. The default values "
"for arguments can be modified through the ``__defaults__``, "
"``__kwdefaults__`` attributes, but unfortunately the argument list itself "
"cannot be set as an attribute. This means that ``help(function)`` will "
"display a useless argument list which will be confusing for the user of the "
"function. An effective but ugly way around this problem is to create the "
"wrapper dynamically, using ``eval``. This can be automated by using the "
"external ``decorator`` module. It provides support for the ``decorator`` "
"decorator, which takes a wrapper and turns it into a decorator which "
"preserves the function signature."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:655
msgid ""
"To sum things up, decorators should always use ``functools.update_wrapper`` "
"or some other means of copying function attributes."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:659
msgid "Examples in the standard library"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:661
msgid ""
"First, it should be mentioned that there's a number of useful decorators "
"available in the standard library. There are three decorators which really "
"form a part of the language:"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:665
msgid ""
"`classmethod` causes a method to become a \"class method\", which means that"
" it can be invoked without creating an instance of the class. When a normal "
"method is invoked, the interpreter inserts the instance object as the first "
"positional parameter, ``self``. When a class method is invoked, the class "
"itself is given as the first parameter, often called ``cls``."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:672
msgid ""
"Class methods are still accessible through the class' namespace, so they "
"don't pollute the module's namespace. Class methods can be used to provide "
"alternative constructors::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:685
msgid "This is cleaner than using a multitude of flags to ``__init__``."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:687
msgid ""
"`staticmethod` is applied to methods to make them \"static\", i.e. basically"
" a normal function, but accessible through the class namespace. This can be "
"useful when the function is only needed inside this class (its name would "
"then be prefixed with ``_``), or when we want the user to think of the "
"method as connected to the class, despite an implementation which doesn't "
"require this."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:694
msgid ""
"`property` is the pythonic answer to the problem of getters and setters. A "
"method decorated with ``property`` becomes a getter which is automatically "
"called on attribute access."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:708
msgid ""
"In this example, ``A.a`` is an read-only attribute. It is also documented: "
"``help(A)`` includes the docstring for attribute ``a`` taken from the getter"
" method. Defining ``a`` as a property allows it to be a calculated on the "
"fly, and has the side effect of making it read-only, because no setter is "
"defined."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:714
msgid "To have a setter and a getter, two methods are required, obviously::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:733
msgid ""
"The way that this works, is that the ``property`` decorator replaces the "
"getter method with a property object. This object in turn has three methods,"
" ``getter``, ``setter``, and ``deleter``, which can be used as decorators. "
"Their job is to set the getter, setter and deleter of the property object "
"(stored as attributes ``fget``, ``fset``, and ``fdel``). The getter can be "
"set like in the example above, when creating the object. When defining the "
"setter, we already have the property object under ``area``, and we add the "
"setter to it by using the ``setter`` method. All this happens when we are "
"creating the class."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:744
msgid ""
"Afterwards, when an instance of the class has been created, the property "
"object is special. When the interpreter executes attribute access, "
"assignment, or deletion, the job is delegated to the methods of the property"
" object."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:749
msgid "To make everything crystal clear, let's define a \"debug\" example::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:782
msgid ""
"Properties are a bit of a stretch for the decorator syntax. One of the "
"premises of the decorator syntax --- that the name is not duplicated --- is "
"violated, but nothing better has been invented so far. It is just good style"
" to use the same name for the getter, setter, and deleter methods."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:791
msgid "Some newer examples include:"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:793
msgid ""
"`functools.lru_cache` memoizes an arbitrary function maintaining a limited "
"cache of arguments:answer pairs (Python 3.2)"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:796
msgid ""
"`functools.total_ordering` is a class decorator which fills in missing "
"ordering methods (`__lt__ <object.__lt__>`, `__gt__ <object.__gt__>`, "
"`__le__ <object.__le__>`, ...) based on a single available one."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:809
msgid "Deprecation of functions"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:811
msgid ""
"Let's say we want to print a deprecation warning on stderr on the first "
"invocation of a function we don't like anymore. If we don't want to modify "
"the function, we can use a decorator::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:836
msgid "It can also be implemented as a function::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:856
msgid "A ``while``-loop removing decorator"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:858
msgid ""
"Let's say we have function which returns a lists of things, and this list "
"created by running a loop. If we don't know how many objects will be needed,"
" the standard way to do this is something like::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:871
msgid ""
"This is fine, as long as the body of the loop is fairly compact. Once it "
"becomes more complicated, as often happens in real code, this becomes pretty"
" unreadable. We could simplify this by using ``yield`` statements, but then "
"the user would have to explicitly call ``list(find_answers())``."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:877
msgid "We can define a decorator which constructs the list for us::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:884
msgid "Our function then becomes::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:895
msgid "A plugin registration system"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:897
msgid ""
"This is a class decorator which doesn't modify the class, but just puts it "
"in a global registry. It falls into the category of decorators returning the"
" original object::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:917
msgid ""
"Here we use a decorator to decentralise the registration of plugins. We call"
" our decorator with a noun, instead of a verb, because we use it to declare "
"that our class is a plugin for ``WordProcessor``. Method ``plugin`` simply "
"appends the class to the list of plugins."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:923
msgid ""
"A word about the plugin itself: it replaces HTML entity for em-dash with a "
"real Unicode em-dash character. It exploits the `unicode literal notation`_ "
"to insert a character by using its name in the unicode database (\"EM "
"DASH\"). If the Unicode character was inserted directly, it would be "
"impossible to distinguish it from an en-dash in the source of a program."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:933
msgid "**More examples and reading**"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:935
msgid ":pep:`318` (function and method decorator syntax)"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:936
msgid ":pep:`3129` (class decorator syntax)"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:937
msgid "https://wiki.python.org/moin/PythonDecoratorLibrary"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:938
msgid "https://docs.python.org/dev/library/functools.html"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:939
msgid "https://pypi.org/project/decorator"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:940
msgid "Bruce Eckel"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:942
msgid "`Decorators I`_: Introduction to Python Decorators"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:943
msgid "`Python Decorators II`_: Decorator Arguments"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:944
msgid "`Python Decorators III`_: A Decorator-Based Build System"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:952
msgid "Context managers"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:954
msgid ""
"A context manager is an object with `__enter__ <object.__enter__>` and "
"`__exit__ <object.__exit__>` methods which can be used in the "
":compound:`with` statement::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:961
msgid "is in the simplest case equivalent to ::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:970
msgid ""
"In other words, the context manager protocol defined in :pep:`343` permits "
"the extraction of the boring part of a :compound:`try..except..finally "
"<try>` structure into a separate class leaving only the interesting "
"``do_something`` block."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:975
msgid ""
"The `__enter__ <object.__enter__>` method is called first.  It can return a "
"value which will be assigned to ``var``. The ``as``-part is optional: if it "
"isn't present, the value returned by ``__enter__`` is simply ignored."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:979
msgid ""
"The block of code underneath ``with`` is executed.  Just like with ``try`` "
"clauses, it can either execute successfully to the end, or it can "
":simple:`break`, :simple:`continue` or :simple:`return`, or it can throw an "
"exception. Either way, after the block is finished, the `__exit__ "
"<object.__exit__>` method is called. If an exception was thrown, the "
"information about the exception is passed to ``__exit__``, which is "
"described below in the next subsection. In the normal case, exceptions can "
"be ignored, just like in a ``finally`` clause, and will be rethrown after "
"``__exit__`` is finished."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:990
msgid ""
"Let's say we want to make sure that a file is closed immediately after we "
"are done writing to it::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:1003
msgid ""
"Here we have made sure that the ``f.close()`` is called when the ``with`` "
"block is exited. Since closing files is such a common operation, the support"
" for this is already present in the ``file`` class. It has an ``__exit__`` "
"method which calls ``close`` and can be used as a context manager itself::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:1012
msgid ""
"The common use for ``try..finally`` is releasing resources. Various "
"different cases are implemented similarly: in the ``__enter__`` phase the "
"resource is acquired, in the ``__exit__`` phase it is released, and the "
"exception, if thrown, is propagated. As with files, there's often a natural "
"operation to perform after the object has been used and it is most "
"convenient to have the support built in. With each release, Python provides "
"support in more places:"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:1020
msgid "all file-like objects:"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:1022
msgid "`file` |==>| automatically closed"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:1023
msgid "`fileinput`, `tempfile`"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:1024
msgid "`bz2.BZ2File`, `gzip.GzipFile`, `tarfile.TarFile`, `zipfile.ZipFile`"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:1026
msgid "`ftplib`, `nntplib` |==>| close connection"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:1027
msgid "locks"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:1029
msgid "`multiprocessing.RLock` |==>| lock and unlock"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:1030
msgid "`multiprocessing.Semaphore`"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:1031
msgid "`memoryview` |==>| automatically release"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:1032
msgid ""
"`decimal.localcontext` |==>| modify precision of computations temporarily"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:1033
msgid "`_winreg.PyHKEY <_winreg.OpenKey>` |==>| open and close hive key"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:1034
msgid "`warnings.catch_warnings` |==>| kill warnings temporarily"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:1035
msgid ""
"`contextlib.closing` |==>| the same as the example above, call ``close``"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:1036
msgid "parallel programming"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:1038
msgid ""
"`concurrent.futures.ThreadPoolExecutor` |==>| invoke in parallel then kill "
"thread pool"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:1039
msgid ""
"`concurrent.futures.ProcessPoolExecutor` |==>| invoke in parallel then kill "
"process pool"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:1040
msgid "`nogil` |==>| solve the GIL problem temporarily (cython only :( )"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:1044
msgid "Catching exceptions"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:1046
msgid ""
"When an exception is thrown in the ``with``-block, it is passed as arguments"
" to ``__exit__``. Three arguments are used, the same as returned by "
":py:func:`sys.exc_info`: type, value, traceback. When no exception is "
"thrown, ``None`` is used for all three arguments.  The context manager can "
"\"swallow\" the exception by returning a true value from ``__exit__``. "
"Exceptions can be easily ignored, because if ``__exit__`` doesn't use "
"``return`` and just falls of the end, ``None`` is returned, a false value, "
"and therefore the exception is rethrown after ``__exit__`` is finished."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:1056
msgid ""
"The ability to catch exceptions opens interesting possibilities. A classic "
"example comes from unit-tests --- we want to make sure that some code throws"
" the right kind of exception::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:1077
msgid "Using generators to define context managers"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:1079
msgid ""
"When discussing generators_, it was said that we prefer generators to "
"iterators implemented as classes because they are shorter, sweeter, and the "
"state is stored as local, not instance, variables. On the other hand, as "
"described in `Bidirectional communication`_, the flow of data between the "
"generator and its caller can be bidirectional. This includes exceptions, "
"which can be thrown into the generator. We would like to implement context "
"managers as special generator functions. In fact, the generator protocol was"
" designed to support this use case."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:1099
msgid ""
"The `contextlib.contextmanager` helper takes a generator and turns it into a"
" context manager. The generator has to obey some rules which are enforced by"
" the wrapper function --- most importantly it must ``yield`` exactly once. "
"The part before the ``yield`` is executed from ``__enter__``, the block of "
"code protected by the context manager is executed when the generator is "
"suspended in ``yield``, and the rest is executed in ``__exit__``. If an "
"exception is thrown, the interpreter hands it to the wrapper through "
"``__exit__`` arguments, and the wrapper function then throws it at the point"
" of the ``yield`` statement. Through the use of generators, the context "
"manager is shorter and simpler."
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:1111
msgid "Let's rewrite the ``closing`` example as a generator::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:1120
msgid "Let's rewrite the ``assert_raises`` example as a generator::"
msgstr ""

#: ../../scientific-python-lectures/advanced/advanced_python/index.rst:1133
msgid ""
"Here we use a decorator to turn generator functions into context managers!"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:5
msgid "Debugging code"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:7
#: ../../scientific-python-lectures/advanced/optimizing/index.rst:11
msgid "**Author**: *Gaël Varoquaux*"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:9
msgid ""
"This section explores tools to understand better your code base: debugging, "
"to find and fix bugs."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:12
msgid ""
"It is not specific to the scientific Python community, but the strategies "
"that we will employ are tailored to its needs."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:18
msgid "IPython"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:19
msgid "`nosetests <https://nose.readthedocs.io/en/latest/>`__"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:20
msgid "`pyflakes <https://pypi.org/project/pyflakes>`__"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:21
msgid "gdb for the C-debugging part."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:29
msgid "Avoiding bugs"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:32
msgid "Coding best practices to avoid getting in trouble"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst-1
msgid "Brian Kernighan"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:36
msgid ""
"*“Everyone knows that debugging is twice as hard as writing a program in the"
" first place. So if you're as clever as you can be when you write it, how "
"will you ever debug it?”*"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:40
msgid "We all write buggy code.  Accept it.  Deal with it."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:41
msgid "Write your code with testing and debugging in mind."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:42
msgid "Keep It Simple, Stupid (KISS)."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:44
msgid "What is the simplest thing that could possibly work?"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:46
msgid "Don't Repeat Yourself (DRY)."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:48
msgid ""
"Every piece of knowledge must have a single, unambiguous, authoritative "
"representation within a system."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:50
msgid "Constants, algorithms, etc..."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:52
msgid "Try to limit interdependencies of your code. (Loose Coupling)"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:53
msgid ""
"Give your variables, functions and modules meaningful names (not mathematics"
" names)"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:57
msgid "pyflakes: fast static analysis"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:59
msgid "They are several static analysis tools in Python; to name a few:"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:61
msgid "`pylint <https://pylint.pycqa.org/en/latest/>`_"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:62
msgid "`pychecker <https://pychecker.sourceforge.net/>`_"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:63
msgid "`pyflakes <https://pypi.org/project/pyflakes>`_"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:64
msgid "`flake8 <https://pypi.org/project/flake8>`_"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:66
msgid "Here we focus on `pyflakes`, which is the simplest tool."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:68
msgid "**Fast, simple**"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:70
msgid "Detects syntax errors, missing imports, typos on names."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:72
msgid ""
"Another good recommendation is the `flake8` tool which is a combination of "
"pyflakes and pep8. Thus, in addition to the types of errors that pyflakes "
"catches, flake8 detects violations of the recommendation in `PEP8 "
"<https://peps.python.org/pep-0008/>`_ style guide."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:77
msgid ""
"Integrating pyflakes (or flake8) in your editor or IDE is highly "
"recommended, it **does yield productivity gains**."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:81
msgid "Running pyflakes on the current edited file"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:83
msgid "You can bind a key to run pyflakes in the current buffer."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:85
msgid "**In kate** Menu: 'settings -> configure kate"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:88
msgid "In plugins enable 'external tools'"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:90
msgid "In external Tools', add `pyflakes`::"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:94
msgid "**In TextMate**"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:96
msgid ""
"Menu: TextMate -> Preferences -> Advanced -> Shell variables, add a shell "
"variable::"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:101
msgid "Then `Ctrl-Shift-V` is binded to a pyflakes report"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:104
msgid "**In vim** In your `.vimrc` (binds F5 to `pyflakes`)::"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:112
msgid "**In emacs** In your `.emacs` (binds F5 to `pyflakes`)::"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:135
msgid "A type-as-go spell-checker like integration"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:137
msgid "**In vim**"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:139
msgid "Use the pyflakes.vim plugin:"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:141
msgid ""
"download the zip file from "
"https://www.vim.org/scripts/script.php?script_id=2441"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:144
msgid "extract the files in ``~/.vim/ftplugin/python``"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:146
msgid "make sure your vimrc has ``filetype plugin indent on``"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:150
msgid ""
"Alternatively: use the `syntastic <https://github.com/vim-"
"syntastic/syntastic>`_ plugin. This can be configured to use ``flake8`` too "
"and also handles on-the-fly checking for many other languages."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:157
msgid "**In emacs**"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:159
msgid ""
"Use the flymake mode with pyflakes, documented on "
"https://www.emacswiki.org/emacs/FlyMake and included in Emacs 26 and more "
"recent. To activate it, use ``M-x`` (meta-key then x) and enter `flymake-"
"mode` at the prompt. To enable it automatically when opening a Python file, "
"add the following line to your .emacs file::"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:169
msgid "Debugging workflow"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:171
msgid ""
"If you do have a non trivial bug, this is when debugging strategies kick in."
" There is no silver bullet. Yet, strategies help:"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:174
msgid ""
"**For debugging a given problem, the favorable situation is when the problem"
" is isolated in a small number of lines of code, outside framework or "
"application code, with short modify-run-fail cycles**"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:178
msgid ""
"Make it fail reliably.  Find a test case that makes the code fail every "
"time."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:180
msgid ""
"Divide and Conquer.  Once you have a failing test case, isolate the failing "
"code."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:183
msgid "Which module."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:184
msgid "Which function."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:185
msgid "Which line of code."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:187
msgid "=> isolate a small reproducible failure: a test case"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:189
msgid "Change one thing at a time and re-run the failing test case."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:190
msgid "Use the debugger to understand what is going wrong."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:191
msgid "Take notes and be patient.  It may take a while."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:195
msgid ""
"Once you have gone through this process: isolated a tight piece of code "
"reproducing the bug and fix the bug using this piece of code, add the "
"corresponding code to your test suite."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:200
msgid "Using the Python debugger"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:202
msgid ""
"The python debugger, ``pdb``: https://docs.python.org/3/library/pdb.html, "
"allows you to inspect your code interactively."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:205
msgid "Specifically it allows you to:"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:207
msgid "View the source code."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:208
msgid "Walk up and down the call stack."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:209
msgid "Inspect values of variables."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:210
msgid "Modify values of variables."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:211
msgid "Set breakpoints."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst-1
msgid "**print**"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:215
msgid ""
"Yes, ``print`` statements do work as a debugging tool. However to inspect "
"runtime, it is often more efficient to use the debugger."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:219
msgid "Invoking the debugger"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:221
msgid "Ways to launch the debugger:"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:223
msgid "Postmortem, launch debugger after module errors."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:224
msgid "Launch the module with the debugger."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:225
msgid "Call the debugger inside the module"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:229
msgid "Postmortem"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:231
msgid "**Situation**: You're working in IPython and you get a traceback."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:233
msgid ""
"Here we debug the file :download:`index_error.py`. When running it, an "
":class:`IndexError` is raised. Type ``%debug`` and drop into the debugger."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst-1
msgid "Post-mortem debugging without IPython"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:281
msgid ""
"In some situations you cannot use IPython, for instance to debug a script "
"that wants to be called from the command line. In this case, you can call "
"the script with ``python -m pdb script.py``::"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:310
msgid "Step-by-step execution"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:312
msgid ""
"**Situation**: You believe a bug exists in a module but are not sure where."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:314
msgid ""
"For instance we are trying to debug :download:`wiener_filtering.py`. Indeed "
"the code runs, but the filtering does not work well."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:317
msgid ""
"Run the script in IPython with the debugger using ``%run -d "
"wiener_filtering.py`` :"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:334
msgid "Set a break point at line 29 using ``b 29``:"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:349
msgid "Continue execution to next breakpoint with ``c(ont(inue))``:"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:361
msgid ""
"Step into code with ``n(ext)`` and ``s(tep)``: ``next`` jumps to the next "
"statement in the current execution context, while ``step`` will go across "
"execution contexts, i.e. enable exploring inside function calls:"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:383
msgid "Step a few lines and explore the local variables:"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:406
msgid ""
"Oh dear, nothing but integers, and 0 variation. Here is our bug, we are "
"doing integer arithmetic."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:310
msgid "Raising exception on numerical errors"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:411
msgid ""
"When we run the :download:`wiener_filtering.py` file, the following warnings"
" are raised:"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:420
msgid ""
"We can turn these warnings in exception, which enables us to do post-mortem "
"debugging on them, and find our problem more quickly:"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:449
msgid "Other ways of starting a debugger"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:451
msgid "**Raising an exception as a poor man break point**"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:453
msgid ""
"If you find it tedious to note the line number to set a break point, you can"
" simply raise an exception at the point that you want to inspect and use "
"IPython's ``%debug``. Note that in this case you cannot step or continue the"
" execution."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:458
msgid "**Debugging test failures using nosetests**"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:460
msgid ""
"You can run ``nosetests --pdb`` to drop in post-mortem debugging on "
"exceptions, and ``nosetests --pdb-failure`` to inspect test failures using "
"the debugger."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:464
msgid ""
"In addition, you can use the IPython interface for the debugger in nose by "
"installing the nose plugin `ipdbplugin "
"<https://pypi.org/project/ipdbplugin>`_. You can than pass ``--ipdb`` and "
"``--ipdb-failure`` options to nosetests."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:469
msgid "**Calling the debugger explicitly**"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:471
msgid "Insert the following line where you want to drop in the debugger::"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:477
msgid ""
"When running ``nosetests``, the output is captured, and thus it seems that "
"the debugger does not work. Simply run the nosetests with the ``-s`` flag."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:449
msgid "Graphical debuggers and alternatives"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:484
msgid ""
"`pudb <https://pypi.org/project/pudb>`_ is a good semi-graphical debugger "
"with a text user interface in the console."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:487
msgid ""
"The `Visual Studio Code <https://code.visualstudio.com/>`_ integrated "
"development environment includes a debugging mode."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:490
msgid ""
"The `Mu editor <https://codewith.mu/>`_ is a simple Python editor that "
"includes a debugging mode."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:495
msgid "Debugger commands and interaction"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:498
msgid "``l(list)``"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:498
msgid "Lists the code at the current position"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:499
msgid "``u(p)``"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:499
msgid "Walk up the call stack"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:500
msgid "``d(own)``"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:500
msgid "Walk down the call stack"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:501
msgid "``n(ext)``"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:501
msgid "Execute the next line (does not go down in new functions)"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:502
msgid "``s(tep)``"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:502
msgid "Execute the next statement (goes down in new functions)"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:503
msgid "``bt``"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:503
msgid "Print the call stack"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:504
msgid "``a``"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:504
msgid "Print the local variables"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:505
msgid "``!command``"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:505
msgid "Execute the given **Python** command (by opposition to pdb commands"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:508
msgid "**Debugger commands are not Python code**"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:510
msgid ""
"You cannot name the variables the way you want. For instance, if in you "
"cannot override the variables in the current frame with the same name: **use"
" different names than your local variable when typing code in the "
"debugger**."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:516
msgid "Getting help when in the debugger"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:518
msgid "Type ``h`` or ``help`` to access the interactive help:"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:546
msgid "Debugging segmentation faults using gdb"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:548
msgid ""
"If you have a segmentation fault, you cannot debug it with pdb, as it "
"crashes the Python interpreter before it can drop in the debugger. "
"Similarly, if you have a bug in C code embedded in Python, pdb is useless. "
"For this we turn to the gnu debugger, `gdb "
"<https://www.gnu.org/software/gdb/>`_, available on Linux."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:554
msgid ""
"Before we start with gdb, let us add a few Python-specific tools to it. For "
"this we add a few macros to our ``~/.gdbinit``. The optimal choice of macro "
"depends on your Python version and your gdb version. I have added a "
"simplified version in :download:`gdbinit`, but feel free to read "
"`DebuggingWithGdb <https://wiki.python.org/moin/DebuggingWithGdb>`_."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:560
msgid ""
"To debug with gdb the Python script :download:`segfault.py`, we can run the "
"script in gdb as follows"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:579
msgid ""
"We get a segfault, and gdb captures it for post-mortem debugging in the C "
"level stack (not the Python call stack). We can debug the C call stack using"
" gdb's commands:"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:592
msgid ""
"As you can see, right now, we are in the C code of numpy. We would like to "
"know what is the Python code that triggers this segfault, so we go up the "
"stack until we hit the Python execution loop:"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:612
msgid ""
"Once we are in the Python execution loop, we can use our special Python "
"helper function. For instance we can find the corresponding Python code:"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:621
msgid ""
"This is numpy code, we need to go up until we find code that we have "
"written:"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:636
msgid "The corresponding code is:"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:642
msgid ""
"Thus the segfault happens when printing ``big_array[-10:]``. The reason is "
"simply that ``big_array`` has been allocated with its end outside the "
"program memory."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:648
msgid ""
"For a list of Python-specific commands defined in the `gdbinit`, read the "
"source of this file."
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:546
msgid "**Wrap up exercise**"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:657
msgid ""
"The following script is well documented and hopefully legible. It seeks to "
"answer a problem of actual interest for numerical computing, but it does not"
" work... Can you debug it?"
msgstr ""

#: ../../scientific-python-lectures/advanced/debugging/index.rst:661
msgid "**Python source code:** :download:`to_debug.py <to_debug.py>`"
msgstr ""

#: ../../../../../../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:3
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:4
msgid "Examples for the image processing chapter"
msgstr ""

#: ../../../../../../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:22
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:23
msgid ":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_face.py`"
msgstr ":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_face.py`"

#: ../../../../../../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:39
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:40
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_interpolation_face.py`"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_interpolation_face.py`"

#: ../../../../../../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:56
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:57
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_block_mean.py`"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_block_mean.py`"

#: ../../../../../../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:73
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:74
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_numpy_array.py`"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_numpy_array.py`"

#: ../../../../../../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:90
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:91
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_radial_mean.py`"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_radial_mean.py`"

#: ../../../../../../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:107
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:108
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_display_face.py`"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_display_face.py`"

#: ../../../../../../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:124
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:125
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_sharpen.py`"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_sharpen.py`"

#: ../../../../../../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:141
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:142
msgid ":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_blur.py`"
msgstr ":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_blur.py`"

#: ../../../../../../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:158
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:159
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_synthetic_data.py`"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_synthetic_data.py`"

#: ../../../../../../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:175
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:176
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_propagation.py`"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_propagation.py`"

#: ../../../../../../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:192
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:193
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_face_denoise.py`"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_face_denoise.py`"

#: ../../../../../../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:209
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:210
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_geom_face.py`"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_geom_face.py`"

#: ../../../../../../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:226
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:227
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_face_tv_denoise.py`"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_face_tv_denoise.py`"

#: ../../../../../../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:243
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:244
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_measure_data.py`"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_measure_data.py`"

#: ../../../../../../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:260
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:261
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_find_object.py`"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_find_object.py`"

#: ../../../../../../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:277
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:278
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_denoising.py`"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_denoising.py`"

#: ../../../../../../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:294
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:295
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_histo_segmentation.py`"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_histo_segmentation.py`"

#: ../../../../../../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:311
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:312
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_greyscale_dilation.py`"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_greyscale_dilation.py`"

#: ../../../../../../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:328
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:329
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_find_edges.py`"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_find_edges.py`"

#: ../../../../../../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:345
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:346
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_clean_morpho.py`"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_clean_morpho.py`"

#: ../../../../../../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:362
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:363
msgid ":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_GMM.py`"
msgstr ":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_GMM.py`"

#: ../../../../../../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:379
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:380
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_watershed_segmentation.py`"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_watershed_segmentation.py`"

#: ../../../../../../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:396
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:397
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_granulo.py`"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_granulo.py`"

#: ../../../../../../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:413
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:414
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_spectral_clustering.py`"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_spectral_clustering.py`"

#: ../../../../../../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:463
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:464
msgid ""
":download:`Download all examples in Python source code: "
"auto_examples_python.zip "
"</advanced/image_processing/auto_examples/auto_examples_python.zip>`"
msgstr ""
":download:`Download all examples in Python source code: "
"auto_examples_python.zip "
"</advanced/image_processing/auto_examples/auto_examples_python.zip>`"

#: ../../../../../../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:467
#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/index.rst:468
msgid ""
":download:`Download all examples in Jupyter notebooks: "
"auto_examples_jupyter.zip "
"</advanced/image_processing/auto_examples/auto_examples_jupyter.zip>`"
msgstr ""
":download:`Download all examples in Jupyter notebooks: "
"auto_examples_jupyter.zip "
"</advanced/image_processing/auto_examples/auto_examples_jupyter.zip>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_GMM.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_image_processing_auto_examples_plot_GMM.py>` to "
"download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_GMM.rst:22
msgid "Segmentation with Gaussian mixture models"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_GMM.rst:24
msgid ""
"This example performs a Gaussian mixture model analysis of the image "
"histogram to find the right thresholds for separating foreground from "
"background."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_GMM.rst:87
msgid ":download:`Download Jupyter notebook: plot_GMM.ipynb <plot_GMM.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_GMM.ipynb <plot_GMM.ipynb>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_GMM.rst:91
msgid ":download:`Download Python source code: plot_GMM.py <plot_GMM.py>`"
msgstr ":download:`Download Python source code: plot_GMM.py <plot_GMM.py>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_GMM.rst:95
msgid ":download:`Download zipped: plot_GMM.zip <plot_GMM.zip>`"
msgstr ":download:`Download zipped: plot_GMM.zip <plot_GMM.zip>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_block_mean.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_image_processing_auto_examples_plot_block_mean.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_block_mean.rst:22
msgid "Plot the block mean of an image"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_block_mean.rst:24
msgid ""
"An example showing how to use broad-casting to plot the mean of blocks of an"
" image."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_block_mean.rst:59
msgid ""
":download:`Download Jupyter notebook: plot_block_mean.ipynb "
"<plot_block_mean.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_block_mean.ipynb "
"<plot_block_mean.ipynb>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_block_mean.rst:63
msgid ""
":download:`Download Python source code: plot_block_mean.py "
"<plot_block_mean.py>`"
msgstr ""
":download:`Download Python source code: plot_block_mean.py "
"<plot_block_mean.py>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_block_mean.rst:67
msgid ":download:`Download zipped: plot_block_mean.zip <plot_block_mean.zip>`"
msgstr ""
":download:`Download zipped: plot_block_mean.zip <plot_block_mean.zip>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_blur.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_image_processing_auto_examples_plot_blur.py>` to"
" download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_blur.rst:22
msgid "Blurring of images"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_blur.rst:24
msgid "An example showing various processes that blur an image."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_blur.rst:63
msgid ""
":download:`Download Jupyter notebook: plot_blur.ipynb <plot_blur.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_blur.ipynb <plot_blur.ipynb>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_blur.rst:67
msgid ":download:`Download Python source code: plot_blur.py <plot_blur.py>`"
msgstr ":download:`Download Python source code: plot_blur.py <plot_blur.py>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_blur.rst:71
msgid ":download:`Download zipped: plot_blur.zip <plot_blur.zip>`"
msgstr ":download:`Download zipped: plot_blur.zip <plot_blur.zip>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_clean_morpho.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_image_processing_auto_examples_plot_clean_morpho.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_clean_morpho.rst:22
msgid "Cleaning segmentation with mathematical morphology"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_clean_morpho.rst:24
msgid ""
"An example showing how to clean segmentation with mathematical morphology: "
"removing small regions and holes."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_clean_morpho.rst:87
msgid ""
":download:`Download Jupyter notebook: plot_clean_morpho.ipynb "
"<plot_clean_morpho.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_clean_morpho.ipynb "
"<plot_clean_morpho.ipynb>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_clean_morpho.rst:91
msgid ""
":download:`Download Python source code: plot_clean_morpho.py "
"<plot_clean_morpho.py>`"
msgstr ""
":download:`Download Python source code: plot_clean_morpho.py "
"<plot_clean_morpho.py>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_clean_morpho.rst:95
msgid ""
":download:`Download zipped: plot_clean_morpho.zip <plot_clean_morpho.zip>`"
msgstr ""
":download:`Download zipped: plot_clean_morpho.zip <plot_clean_morpho.zip>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_denoising.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_image_processing_auto_examples_plot_denoising.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_denoising.rst:22
msgid "Denoising an image with the median filter"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_denoising.rst:24
msgid ""
"This example shows the original image, the noisy image, the denoised one "
"(with the median filter) and the difference between the two."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_denoising.rst:78
msgid ""
":download:`Download Jupyter notebook: plot_denoising.ipynb "
"<plot_denoising.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_denoising.ipynb "
"<plot_denoising.ipynb>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_denoising.rst:82
msgid ""
":download:`Download Python source code: plot_denoising.py "
"<plot_denoising.py>`"
msgstr ""
":download:`Download Python source code: plot_denoising.py "
"<plot_denoising.py>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_denoising.rst:86
msgid ":download:`Download zipped: plot_denoising.zip <plot_denoising.zip>`"
msgstr ":download:`Download zipped: plot_denoising.zip <plot_denoising.zip>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_display_face.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_image_processing_auto_examples_plot_display_face.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_display_face.rst:22
msgid "Display a Raccoon Face"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_display_face.rst:24
msgid "An example that displays a raccoon face with matplotlib."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_display_face.rst:62
msgid ""
":download:`Download Jupyter notebook: plot_display_face.ipynb "
"<plot_display_face.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_display_face.ipynb "
"<plot_display_face.ipynb>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_display_face.rst:66
msgid ""
":download:`Download Python source code: plot_display_face.py "
"<plot_display_face.py>`"
msgstr ""
":download:`Download Python source code: plot_display_face.py "
"<plot_display_face.py>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_display_face.rst:70
msgid ""
":download:`Download zipped: plot_display_face.zip <plot_display_face.zip>`"
msgstr ""
":download:`Download zipped: plot_display_face.zip <plot_display_face.zip>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_face.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_image_processing_auto_examples_plot_face.py>` to"
" download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_face.rst:22
msgid "Displaying a Raccoon Face"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_face.rst:24
msgid "Small example to plot a raccoon face."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_face.rst:51
msgid ""
":download:`Download Jupyter notebook: plot_face.ipynb <plot_face.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_face.ipynb <plot_face.ipynb>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_face.rst:55
msgid ":download:`Download Python source code: plot_face.py <plot_face.py>`"
msgstr ":download:`Download Python source code: plot_face.py <plot_face.py>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_face.rst:59
msgid ":download:`Download zipped: plot_face.zip <plot_face.zip>`"
msgstr ":download:`Download zipped: plot_face.zip <plot_face.zip>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_face_denoise.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_image_processing_auto_examples_plot_face_denoise.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_face_denoise.rst:22
msgid "Image denoising"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_face_denoise.rst:24
msgid "This example demoes image denoising on a Raccoon face."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_face_denoise.rst:73
msgid ""
":download:`Download Jupyter notebook: plot_face_denoise.ipynb "
"<plot_face_denoise.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_face_denoise.ipynb "
"<plot_face_denoise.ipynb>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_face_denoise.rst:77
msgid ""
":download:`Download Python source code: plot_face_denoise.py "
"<plot_face_denoise.py>`"
msgstr ""
":download:`Download Python source code: plot_face_denoise.py "
"<plot_face_denoise.py>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_face_denoise.rst:81
msgid ""
":download:`Download zipped: plot_face_denoise.zip <plot_face_denoise.zip>`"
msgstr ""
":download:`Download zipped: plot_face_denoise.zip <plot_face_denoise.zip>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_face_tv_denoise.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_image_processing_auto_examples_plot_face_tv_denoise.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_face_tv_denoise.rst:22
msgid "Total Variation denoising"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_face_tv_denoise.rst:24
msgid "This example demoes Total-Variation (TV) denoising on a Raccoon face."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_face_tv_denoise.rst:76
msgid ""
":download:`Download Jupyter notebook: plot_face_tv_denoise.ipynb "
"<plot_face_tv_denoise.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_face_tv_denoise.ipynb "
"<plot_face_tv_denoise.ipynb>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_face_tv_denoise.rst:80
msgid ""
":download:`Download Python source code: plot_face_tv_denoise.py "
"<plot_face_tv_denoise.py>`"
msgstr ""
":download:`Download Python source code: plot_face_tv_denoise.py "
"<plot_face_tv_denoise.py>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_face_tv_denoise.rst:84
msgid ""
":download:`Download zipped: plot_face_tv_denoise.zip "
"<plot_face_tv_denoise.zip>`"
msgstr ""
":download:`Download zipped: plot_face_tv_denoise.zip "
"<plot_face_tv_denoise.zip>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_find_edges.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_image_processing_auto_examples_plot_find_edges.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_find_edges.rst:22
msgid "Finding edges with Sobel filters"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_find_edges.rst:24
msgid "The Sobel filter is one of the simplest way of finding edges."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_find_edges.rst:86
msgid ""
":download:`Download Jupyter notebook: plot_find_edges.ipynb "
"<plot_find_edges.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_find_edges.ipynb "
"<plot_find_edges.ipynb>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_find_edges.rst:90
msgid ""
":download:`Download Python source code: plot_find_edges.py "
"<plot_find_edges.py>`"
msgstr ""
":download:`Download Python source code: plot_find_edges.py "
"<plot_find_edges.py>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_find_edges.rst:94
msgid ":download:`Download zipped: plot_find_edges.zip <plot_find_edges.zip>`"
msgstr ""
":download:`Download zipped: plot_find_edges.zip <plot_find_edges.zip>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_find_object.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_image_processing_auto_examples_plot_find_object.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_find_object.rst:22
msgid "Find the bounding box of an object"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_find_object.rst:24
msgid ""
"This example shows how to extract the bounding box of the largest object"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_find_object.rst:75
msgid ""
":download:`Download Jupyter notebook: plot_find_object.ipynb "
"<plot_find_object.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_find_object.ipynb "
"<plot_find_object.ipynb>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_find_object.rst:79
msgid ""
":download:`Download Python source code: plot_find_object.py "
"<plot_find_object.py>`"
msgstr ""
":download:`Download Python source code: plot_find_object.py "
"<plot_find_object.py>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_find_object.rst:83
msgid ""
":download:`Download zipped: plot_find_object.zip <plot_find_object.zip>`"
msgstr ""
":download:`Download zipped: plot_find_object.zip <plot_find_object.zip>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_geom_face.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_image_processing_auto_examples_plot_geom_face.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_geom_face.rst:22
#: ../../scientific-python-lectures/advanced/image_processing/index.rst:260
msgid "Geometrical transformations"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_geom_face.rst:24
msgid ""
"This examples demos some simple geometrical transformations on a Raccoon "
"face."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_geom_face.rst:77
msgid ""
":download:`Download Jupyter notebook: plot_geom_face.ipynb "
"<plot_geom_face.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_geom_face.ipynb "
"<plot_geom_face.ipynb>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_geom_face.rst:81
msgid ""
":download:`Download Python source code: plot_geom_face.py "
"<plot_geom_face.py>`"
msgstr ""
":download:`Download Python source code: plot_geom_face.py "
"<plot_geom_face.py>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_geom_face.rst:85
msgid ":download:`Download zipped: plot_geom_face.zip <plot_geom_face.zip>`"
msgstr ":download:`Download zipped: plot_geom_face.zip <plot_geom_face.zip>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_granulo.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_image_processing_auto_examples_plot_granulo.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_granulo.rst:22
msgid "Granulometry"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_granulo.rst:24
msgid "This example performs a simple granulometry analysis."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_granulo.rst:92
msgid ""
":download:`Download Jupyter notebook: plot_granulo.ipynb "
"<plot_granulo.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_granulo.ipynb "
"<plot_granulo.ipynb>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_granulo.rst:96
msgid ""
":download:`Download Python source code: plot_granulo.py <plot_granulo.py>`"
msgstr ""
":download:`Download Python source code: plot_granulo.py <plot_granulo.py>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_granulo.rst:100
msgid ":download:`Download zipped: plot_granulo.zip <plot_granulo.zip>`"
msgstr ":download:`Download zipped: plot_granulo.zip <plot_granulo.zip>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_greyscale_dilation.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_image_processing_auto_examples_plot_greyscale_dilation.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_greyscale_dilation.rst:22
msgid "Greyscale dilation"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_greyscale_dilation.rst:24
msgid "This example illustrates greyscale mathematical morphology."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_greyscale_dilation.rst:73
msgid ""
":download:`Download Jupyter notebook: plot_greyscale_dilation.ipynb "
"<plot_greyscale_dilation.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_greyscale_dilation.ipynb "
"<plot_greyscale_dilation.ipynb>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_greyscale_dilation.rst:77
msgid ""
":download:`Download Python source code: plot_greyscale_dilation.py "
"<plot_greyscale_dilation.py>`"
msgstr ""
":download:`Download Python source code: plot_greyscale_dilation.py "
"<plot_greyscale_dilation.py>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_greyscale_dilation.rst:81
msgid ""
":download:`Download zipped: plot_greyscale_dilation.zip "
"<plot_greyscale_dilation.zip>`"
msgstr ""
":download:`Download zipped: plot_greyscale_dilation.zip "
"<plot_greyscale_dilation.zip>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_histo_segmentation.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_image_processing_auto_examples_plot_histo_segmentation.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_histo_segmentation.rst:22
msgid "Histogram segmentation"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_histo_segmentation.rst:24
msgid "This example does simple histogram analysis to perform segmentation."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_histo_segmentation.rst:80
msgid ""
":download:`Download Jupyter notebook: plot_histo_segmentation.ipynb "
"<plot_histo_segmentation.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_histo_segmentation.ipynb "
"<plot_histo_segmentation.ipynb>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_histo_segmentation.rst:84
msgid ""
":download:`Download Python source code: plot_histo_segmentation.py "
"<plot_histo_segmentation.py>`"
msgstr ""
":download:`Download Python source code: plot_histo_segmentation.py "
"<plot_histo_segmentation.py>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_histo_segmentation.rst:88
msgid ""
":download:`Download zipped: plot_histo_segmentation.zip "
"<plot_histo_segmentation.zip>`"
msgstr ""
":download:`Download zipped: plot_histo_segmentation.zip "
"<plot_histo_segmentation.zip>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_interpolation_face.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_image_processing_auto_examples_plot_interpolation_face.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_interpolation_face.rst:22
msgid "Image interpolation"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_interpolation_face.rst:24
msgid "The example demonstrates image interpolation on a Raccoon face."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_interpolation_face.rst:58
msgid ""
":download:`Download Jupyter notebook: plot_interpolation_face.ipynb "
"<plot_interpolation_face.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_interpolation_face.ipynb "
"<plot_interpolation_face.ipynb>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_interpolation_face.rst:62
msgid ""
":download:`Download Python source code: plot_interpolation_face.py "
"<plot_interpolation_face.py>`"
msgstr ""
":download:`Download Python source code: plot_interpolation_face.py "
"<plot_interpolation_face.py>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_interpolation_face.rst:66
msgid ""
":download:`Download zipped: plot_interpolation_face.zip "
"<plot_interpolation_face.zip>`"
msgstr ""
":download:`Download zipped: plot_interpolation_face.zip "
"<plot_interpolation_face.zip>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_measure_data.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_image_processing_auto_examples_plot_measure_data.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_measure_data.rst:22
msgid "Measurements from images"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_measure_data.rst:24
msgid "This examples shows how to measure quantities from various images."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_measure_data.rst:76
msgid ""
":download:`Download Jupyter notebook: plot_measure_data.ipynb "
"<plot_measure_data.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_measure_data.ipynb "
"<plot_measure_data.ipynb>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_measure_data.rst:80
msgid ""
":download:`Download Python source code: plot_measure_data.py "
"<plot_measure_data.py>`"
msgstr ""
":download:`Download Python source code: plot_measure_data.py "
"<plot_measure_data.py>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_measure_data.rst:84
msgid ""
":download:`Download zipped: plot_measure_data.zip <plot_measure_data.zip>`"
msgstr ""
":download:`Download zipped: plot_measure_data.zip <plot_measure_data.zip>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_numpy_array.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_image_processing_auto_examples_plot_numpy_array.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_numpy_array.rst:22
msgid "Image manipulation and NumPy arrays"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_numpy_array.rst:24
msgid ""
"This example shows how to do image manipulation using common NumPy arrays "
"tricks."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_numpy_array.rst:62
msgid ""
":download:`Download Jupyter notebook: plot_numpy_array.ipynb "
"<plot_numpy_array.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_numpy_array.ipynb "
"<plot_numpy_array.ipynb>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_numpy_array.rst:66
msgid ""
":download:`Download Python source code: plot_numpy_array.py "
"<plot_numpy_array.py>`"
msgstr ""
":download:`Download Python source code: plot_numpy_array.py "
"<plot_numpy_array.py>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_numpy_array.rst:70
msgid ""
":download:`Download zipped: plot_numpy_array.zip <plot_numpy_array.zip>`"
msgstr ""
":download:`Download zipped: plot_numpy_array.zip <plot_numpy_array.zip>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_propagation.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_image_processing_auto_examples_plot_propagation.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_propagation.rst:22
msgid "Opening, erosion, and propagation"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_propagation.rst:24
msgid "This example shows simple operations of mathematical morphology."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_propagation.rst:69
msgid ""
":download:`Download Jupyter notebook: plot_propagation.ipynb "
"<plot_propagation.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_propagation.ipynb "
"<plot_propagation.ipynb>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_propagation.rst:73
msgid ""
":download:`Download Python source code: plot_propagation.py "
"<plot_propagation.py>`"
msgstr ""
":download:`Download Python source code: plot_propagation.py "
"<plot_propagation.py>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_propagation.rst:77
msgid ""
":download:`Download zipped: plot_propagation.zip <plot_propagation.zip>`"
msgstr ""
":download:`Download zipped: plot_propagation.zip <plot_propagation.zip>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_radial_mean.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_image_processing_auto_examples_plot_radial_mean.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_radial_mean.rst:22
msgid "Radial mean"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_radial_mean.rst:24
msgid "This example shows how to do a radial mean with scikit-image."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_radial_mean.rst:61
msgid ""
":download:`Download Jupyter notebook: plot_radial_mean.ipynb "
"<plot_radial_mean.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_radial_mean.ipynb "
"<plot_radial_mean.ipynb>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_radial_mean.rst:65
msgid ""
":download:`Download Python source code: plot_radial_mean.py "
"<plot_radial_mean.py>`"
msgstr ""
":download:`Download Python source code: plot_radial_mean.py "
"<plot_radial_mean.py>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_radial_mean.rst:69
msgid ""
":download:`Download zipped: plot_radial_mean.zip <plot_radial_mean.zip>`"
msgstr ""
":download:`Download zipped: plot_radial_mean.zip <plot_radial_mean.zip>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_sharpen.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_image_processing_auto_examples_plot_sharpen.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_sharpen.rst:22
msgid "Image sharpening"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_sharpen.rst:24
msgid ""
"This example shows how to sharpen an image in noiseless situation by "
"applying the filter inverse to the blur."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_sharpen.rst:67
msgid ""
":download:`Download Jupyter notebook: plot_sharpen.ipynb "
"<plot_sharpen.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_sharpen.ipynb "
"<plot_sharpen.ipynb>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_sharpen.rst:71
msgid ""
":download:`Download Python source code: plot_sharpen.py <plot_sharpen.py>`"
msgstr ""
":download:`Download Python source code: plot_sharpen.py <plot_sharpen.py>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_sharpen.rst:75
msgid ":download:`Download zipped: plot_sharpen.zip <plot_sharpen.zip>`"
msgstr ":download:`Download zipped: plot_sharpen.zip <plot_sharpen.zip>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_spectral_clustering.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_image_processing_auto_examples_plot_spectral_clustering.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_spectral_clustering.rst:22
msgid "Segmentation with spectral clustering"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_spectral_clustering.rst:24
msgid "This example uses spectral clustering to do segmentation."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_spectral_clustering.rst:60
msgid "4 circles"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_spectral_clustering.rst:107
msgid ""
":download:`Download Jupyter notebook: plot_spectral_clustering.ipynb "
"<plot_spectral_clustering.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_spectral_clustering.ipynb "
"<plot_spectral_clustering.ipynb>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_spectral_clustering.rst:111
msgid ""
":download:`Download Python source code: plot_spectral_clustering.py "
"<plot_spectral_clustering.py>`"
msgstr ""
":download:`Download Python source code: plot_spectral_clustering.py "
"<plot_spectral_clustering.py>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_spectral_clustering.rst:115
msgid ""
":download:`Download zipped: plot_spectral_clustering.zip "
"<plot_spectral_clustering.zip>`"
msgstr ""
":download:`Download zipped: plot_spectral_clustering.zip "
"<plot_spectral_clustering.zip>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_synthetic_data.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_image_processing_auto_examples_plot_synthetic_data.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_synthetic_data.rst:22
msgid "Synthetic data"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_synthetic_data.rst:24
msgid "The example generates and displays simple synthetic data."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_synthetic_data.rst:71
msgid ""
":download:`Download Jupyter notebook: plot_synthetic_data.ipynb "
"<plot_synthetic_data.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_synthetic_data.ipynb "
"<plot_synthetic_data.ipynb>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_synthetic_data.rst:75
msgid ""
":download:`Download Python source code: plot_synthetic_data.py "
"<plot_synthetic_data.py>`"
msgstr ""
":download:`Download Python source code: plot_synthetic_data.py "
"<plot_synthetic_data.py>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_synthetic_data.rst:79
msgid ""
":download:`Download zipped: plot_synthetic_data.zip "
"<plot_synthetic_data.zip>`"
msgstr ""
":download:`Download zipped: plot_synthetic_data.zip "
"<plot_synthetic_data.zip>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_watershed_segmentation.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_image_processing_auto_examples_plot_watershed_segmentation.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_watershed_segmentation.rst:22
msgid "Watershed segmentation"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_watershed_segmentation.rst:24
msgid "This example shows how to do segmentation with watershed."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_watershed_segmentation.rst:77
msgid ""
":download:`Download Jupyter notebook: plot_watershed_segmentation.ipynb "
"<plot_watershed_segmentation.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_watershed_segmentation.ipynb "
"<plot_watershed_segmentation.ipynb>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_watershed_segmentation.rst:81
msgid ""
":download:`Download Python source code: plot_watershed_segmentation.py "
"<plot_watershed_segmentation.py>`"
msgstr ""
":download:`Download Python source code: plot_watershed_segmentation.py "
"<plot_watershed_segmentation.py>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/plot_watershed_segmentation.rst:85
msgid ""
":download:`Download zipped: plot_watershed_segmentation.zip "
"<plot_watershed_segmentation.zip>`"
msgstr ""
":download:`Download zipped: plot_watershed_segmentation.zip "
"<plot_watershed_segmentation.zip>`"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:9
msgid ""
"**00:00.000** total execution time for 24 files **from "
"advanced/image_processing/auto_examples**:"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:35
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_GMM.py` "
"(``plot_GMM.py``)"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_GMM.py` "
"(``plot_GMM.py``)"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:38
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_block_mean.py` "
"(``plot_block_mean.py``)"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_block_mean.py` "
"(``plot_block_mean.py``)"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:41
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_blur.py` "
"(``plot_blur.py``)"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_blur.py` "
"(``plot_blur.py``)"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:44
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_clean_morpho.py`"
" (``plot_clean_morpho.py``)"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_clean_morpho.py`"
" (``plot_clean_morpho.py``)"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:47
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_denoising.py` "
"(``plot_denoising.py``)"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_denoising.py` "
"(``plot_denoising.py``)"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:50
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_display_face.py`"
" (``plot_display_face.py``)"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_display_face.py`"
" (``plot_display_face.py``)"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:53
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_face.py` "
"(``plot_face.py``)"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_face.py` "
"(``plot_face.py``)"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:56
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_face_denoise.py`"
" (``plot_face_denoise.py``)"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_face_denoise.py`"
" (``plot_face_denoise.py``)"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:59
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_face_tv_denoise.py`"
" (``plot_face_tv_denoise.py``)"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_face_tv_denoise.py`"
" (``plot_face_tv_denoise.py``)"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:62
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_find_edges.py` "
"(``plot_find_edges.py``)"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_find_edges.py` "
"(``plot_find_edges.py``)"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:65
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_find_object.py` "
"(``plot_find_object.py``)"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_find_object.py` "
"(``plot_find_object.py``)"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:68
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_geom_face.py` "
"(``plot_geom_face.py``)"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_geom_face.py` "
"(``plot_geom_face.py``)"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:71
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_granulo.py` "
"(``plot_granulo.py``)"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_granulo.py` "
"(``plot_granulo.py``)"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:74
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_greyscale_dilation.py`"
" (``plot_greyscale_dilation.py``)"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_greyscale_dilation.py`"
" (``plot_greyscale_dilation.py``)"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:77
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_histo_segmentation.py`"
" (``plot_histo_segmentation.py``)"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_histo_segmentation.py`"
" (``plot_histo_segmentation.py``)"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:80
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_interpolation_face.py`"
" (``plot_interpolation_face.py``)"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_interpolation_face.py`"
" (``plot_interpolation_face.py``)"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:83
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_measure_data.py`"
" (``plot_measure_data.py``)"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_measure_data.py`"
" (``plot_measure_data.py``)"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:86
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_numpy_array.py` "
"(``plot_numpy_array.py``)"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_numpy_array.py` "
"(``plot_numpy_array.py``)"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:89
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_propagation.py` "
"(``plot_propagation.py``)"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_propagation.py` "
"(``plot_propagation.py``)"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:92
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_radial_mean.py` "
"(``plot_radial_mean.py``)"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_radial_mean.py` "
"(``plot_radial_mean.py``)"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:95
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_sharpen.py` "
"(``plot_sharpen.py``)"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_sharpen.py` "
"(``plot_sharpen.py``)"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:98
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_spectral_clustering.py`"
" (``plot_spectral_clustering.py``)"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_spectral_clustering.py`"
" (``plot_spectral_clustering.py``)"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:101
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_synthetic_data.py`"
" (``plot_synthetic_data.py``)"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_synthetic_data.py`"
" (``plot_synthetic_data.py``)"

#: ../../scientific-python-lectures/advanced/image_processing/auto_examples/sg_execution_times.rst:104
msgid ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_watershed_segmentation.py`"
" (``plot_watershed_segmentation.py``)"
msgstr ""
":ref:`sphx_glr_advanced_image_processing_auto_examples_plot_watershed_segmentation.py`"
" (``plot_watershed_segmentation.py``)"

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:10
msgid "Image manipulation and processing using NumPy and SciPy"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:12
msgid "**Authors**: *Emmanuelle Gouillart, Gaël Varoquaux*"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:15
msgid ""
"This section addresses basic image manipulation and processing using the "
"core scientific modules NumPy and SciPy. Some of the operations covered by "
"this tutorial may be useful for other kinds of multidimensional array "
"processing than image processing. In particular, the submodule "
":mod:`scipy.ndimage` provides functions operating on n-dimensional NumPy "
"arrays."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:24
msgid ""
"For more advanced image processing and image-specific routines, see the "
"tutorial :ref:`scikit_image`, dedicated to the :mod:`skimage` module."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst-1
msgid "Image = 2-D numerical array"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:30
msgid "(or 3-D: CT, MRI, 2D + time; 4-D, ...)"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:32
msgid "Here, **image == NumPy array** ``np.array``"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:34
msgid "**Tools used in this tutorial**:"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:36
msgid "``numpy``: basic array manipulation"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:38
msgid ""
"``scipy``: ``scipy.ndimage`` submodule dedicated to image processing "
"(n-dimensional images). See the `documentation "
"<https://docs.scipy.org/doc/scipy/tutorial/ndimage.html>`_::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:45
msgid "**Common tasks in image processing**:"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:47
msgid "Input/Output, displaying images"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:49
msgid "Basic manipulations: cropping, flipping, rotating, ..."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:51
msgid "Image filtering: denoising, sharpening"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:53
msgid "Image segmentation: labeling pixels corresponding to different objects"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:55
msgid "Classification"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:57
#: ../../scientific-python-lectures/advanced/image_processing/index.rst:569
msgid "Feature extraction"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:68
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:25
#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:53
#: ../../scientific-python-lectures/advanced/optimizing/index.rst:22
msgid "Chapters contents"
msgstr "各章の内容"

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:71
msgid "Opening and writing to image files"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:73
msgid "Writing an array to a file:"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:82
msgid "Creating a NumPy array from an image file::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:94
msgid "dtype is uint8 for 8-bit images (0-255)"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:96
msgid "Opening raw files (camera, 3-D images) ::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:104
msgid ""
"Need to know the shape and dtype of the image (how to separate data bytes)."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:107
msgid "For large data, use ``np.memmap`` for memory mapping::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:111
msgid "(data are read from the file, and not loaded into memory)"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:113
msgid "Working on a list of image files ::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:124
msgid "Displaying images"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:126
msgid ""
"Use ``matplotlib`` and ``imshow`` to display an image inside a ``matplotlib "
"figure``::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:134
msgid "Increase contrast by setting min and max values::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:142
msgid "Draw contour lines::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:154
msgid ""
"[:ref:`Python source code "
"<sphx_glr_advanced_image_processing_auto_examples_plot_display_face.py>`]"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:156
msgid ""
"For smooth intensity variations, use ``interpolation='bilinear'``. For fine "
"inspection of intensity variations, use ``interpolation='nearest'``::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:170
msgid ""
"[:ref:`Python source code "
"<sphx_glr_advanced_image_processing_auto_examples_plot_interpolation_face.py>`]"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:175
msgid ""
"More interpolation methods are in  `Matplotlib's examples "
"<https://matplotlib.org/examples/images_contours_and_fields/interpolation_methods.html>`_."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:181
msgid "Basic manipulations"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:183
msgid "Images are arrays: use the whole ``numpy`` machinery."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:215
msgid ""
"[:ref:`Python source code "
"<sphx_glr_advanced_image_processing_auto_examples_plot_numpy_array.py>`]"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:219
msgid "Statistical information"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:230
msgid "``np.histogram``"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:236
msgid ""
"Open as an array the ``scikit-image`` logo (https://scikit-"
"image.org/_static/img/logo.png), or an image that you have on your computer."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:240
msgid ""
"Crop a meaningful part of the image, for example the python circle in the "
"logo."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:243
msgid ""
"Display the image array using ``matplotlib``. Change the interpolation "
"method and zoom to see the difference."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:246
msgid "Transform your image to greyscale"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:248
msgid ""
"Increase the contrast of the image by changing its minimum and maximum "
"values. **Optional**: use ``scipy.stats.scoreatpercentile`` (read the "
"docstring!) to saturate 5% of the darkest pixels and 5% of the lightest "
"pixels."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:253
msgid "Save the array to two different file formats (png, jpg, tiff)"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:279
msgid ""
"[:ref:`Python source code "
"<sphx_glr_advanced_image_processing_auto_examples_plot_geom_face.py>`]"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:282
msgid "Image filtering"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:284
msgid ""
"**Local filters**: replace the value of pixels by a function of the values "
"of neighboring pixels."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:287
msgid ""
"Neighbourhood: square (choose size), disk, or more complicated *structuring "
"element*."
msgstr "局所: 正方形（サイズを選択）、円盤、またはより複雑な *構造要素* 。"

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:295
msgid "Blurring/smoothing"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:297
msgid "**Gaussian filter** from ``scipy.ndimage``::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:303
msgid "**Uniform filter** ::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:313
msgid ""
"[:ref:`Python source code "
"<sphx_glr_advanced_image_processing_auto_examples_plot_blur.py>`]"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:316
msgid "Sharpening"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:318
msgid "Sharpen a blurred image::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:323
msgid ""
"increase the weight of edges by adding an approximation of the Laplacian::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:336
msgid ""
"[:ref:`Python source code "
"<sphx_glr_advanced_image_processing_auto_examples_plot_sharpen.py>`]"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:340
msgid "Denoising"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:342
msgid "Noisy face::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:349
msgid ""
"A **Gaussian filter** smoothes the noise out... and the edges as well::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:353
msgid ""
"Most local linear isotropic filters blur the image "
"(``scipy.ndimage.uniform_filter``)"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:355
msgid "A **median filter** preserves better the edges::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:365
msgid ""
"[:ref:`Python source code "
"<sphx_glr_advanced_image_processing_auto_examples_plot_face_denoise.py>`]"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:368
msgid ""
"Median filter: better result for straight boundaries (**low curvature**)::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:383
msgid ""
"[:ref:`Python source code "
"<sphx_glr_advanced_image_processing_auto_examples_plot_denoising.py>`]"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:386
msgid ""
"Other rank filter: ``scipy.ndimage.maximum_filter``, "
"``scipy.ndimage.percentile_filter``"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:389
msgid "Other local non-linear filters: Wiener (``scipy.signal.wiener``), etc."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:391
msgid "**Non-local filters**"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:340
msgid "**Exercise: denoising**"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:396
msgid ""
"Create a binary image (of 0s and 1s) with several objects (circles, "
"ellipses, squares, or random shapes)."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:399
msgid "Add some noise (e.g., 20% of noise)"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:401
msgid ""
"Try two different denoising methods for denoising the image: gaussian "
"filtering and median filtering."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:404
msgid ""
"Compare the histograms of the two different denoised images. Which one is "
"the closest to the histogram of the original (noise-free) image?"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:410
msgid ""
"More denoising filters are available in :mod:`skimage.denoising`, see the "
":ref:`scikit_image` tutorial."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:416
msgid "Mathematical morphology"
msgstr "数学的形態学"

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:418
msgid ""
"See `wikipedia <https://en.wikipedia.org/wiki/Mathematical_morphology>`_ for"
" a definition of mathematical morphology."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:421
msgid ""
"Probe an image with a simple shape (a **structuring element**), and modify "
"this image according to how the shape locally fits or misses the image."
msgstr ""
"単純な形状（ **構造化要素** "
"）で画像を探査し、その形状が局所的に画像にどのようにフィットするか、あるいは画像をどのように外すかによって、この画像を修正します。"

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:425
msgid "**Structuring element**::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:440
msgid ""
"**Erosion** = minimum filter. Replace the value of a pixel by the minimal "
"value covered by the structuring element.::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:475
msgid "**Dilation**: maximum filter::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:493
msgid "Also works for grey-valued images::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:515
msgid ""
"[:ref:`Python source code "
"<sphx_glr_advanced_image_processing_auto_examples_plot_greyscale_dilation.py>`]"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:517
msgid "**Opening**: erosion + dilation::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:542
msgid "**Application**: remove noise::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:561
msgid ""
"[:ref:`Python source code "
"<sphx_glr_advanced_image_processing_auto_examples_plot_propagation.py>`]"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:563
msgid "**Closing**: dilation + erosion"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:565
msgid ""
"Many other mathematical morphology operations: hit and miss transform, "
"tophat, etc."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:572
msgid "Edge detection"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:574
#: ../../scientific-python-lectures/advanced/image_processing/index.rst:727
msgid "Synthetic data::"
msgstr "合成データ::"

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:582
msgid ""
"Use a **gradient operator** (**Sobel**) to find high intensity variations::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:594
msgid ""
"[:ref:`Python source code "
"<sphx_glr_advanced_image_processing_auto_examples_plot_find_edges.py>`]"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:598
msgid "Segmentation"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:600
msgid "**Histogram-based** segmentation (no spatial information)"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:627
msgid ""
"[:ref:`Python source code "
"<sphx_glr_advanced_image_processing_auto_examples_plot_histo_segmentation.py>`]"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:629
msgid "Use mathematical morphology to clean up the result::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:642
msgid ""
"[:ref:`Python source code "
"<sphx_glr_advanced_image_processing_auto_examples_plot_clean_morpho.py>`]"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:647
msgid ""
"Check that reconstruction operations (erosion + propagation) produce a "
"better result than opening/closing::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:663
msgid ""
"Check how a first denoising step (e.g. with a median filter) modifies the "
"histogram, and check that the resulting histogram-based segmentation is more"
" accurate."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:670
msgid ""
"More advanced segmentation algorithms are found in the ``scikit-image``: see"
" :ref:`scikit_image`."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:675
msgid ""
"Other Scientific Packages provide algorithms that can be useful for image "
"processing. In this example, we use the spectral clustering function of the "
"``scikit-learn`` in order to segment glued objects."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:725
msgid "Measuring objects properties: ``scipy.ndimage.measurements``"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:738
msgid "**Analysis of connected components**"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:740
msgid "Label connected components: ``scipy.dimage.label``::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:754
msgid ""
"[:ref:`Python source code "
"<sphx_glr_advanced_image_processing_auto_examples_plot_synthetic_data.py>`]"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:756
msgid "Compute size, mean_value, etc. of each region::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:761
msgid "Clean up small connect components::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:771
msgid "Now reassign labels with ``np.searchsorted``::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:782
msgid ""
"[:ref:`Python source code "
"<sphx_glr_advanced_image_processing_auto_examples_plot_measure_data.py>`]"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:784
msgid "Find region of interest enclosing object::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:797
msgid ""
"[:ref:`Python source code "
"<sphx_glr_advanced_image_processing_auto_examples_plot_find_object.py>`]"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:799
msgid ""
"Other spatial measures: ``scipy.ndimage.center_of_mass``, "
"``scipy.ndimage.maximum_position``, etc."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:802
msgid "Can be used outside the limited scope of segmentation applications."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:804
msgid "Example: block mean::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:820
msgid ""
"[:ref:`Python source code "
"<sphx_glr_advanced_image_processing_auto_examples_plot_block_mean.py>`]"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:822
msgid ""
"When regions are regular blocks, it is more efficient to use stride tricks "
"(:ref:`stride-manipulation-label`)."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:825
msgid "Non-regularly-spaced blocks: radial mean::"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:839
msgid ""
"[:ref:`Python source code "
"<sphx_glr_advanced_image_processing_auto_examples_plot_radial_mean.py>`]"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:842
msgid "**Other measures**"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:844
msgid "Correlation function, Fourier/wavelet spectrum, etc."
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:846
msgid ""
"One example with mathematical morphology: `granulometry "
"<https://en.wikipedia.org/wiki/Granulometry_%28morphology%29>`_"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:887
msgid ""
"[:ref:`Python source code "
"<sphx_glr_advanced_image_processing_auto_examples_plot_granulo.py>`]"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:891
#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:544
#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:1027
msgid "Full code examples"
msgstr "全コード例"

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:902
msgid "More on image-processing:"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:904
msgid "The chapter on :ref:`Scikit-image <scikit_image>`"
msgstr ""

#: ../../scientific-python-lectures/advanced/image_processing/index.rst:906
msgid ""
"Other, more powerful and complete modules: `OpenCV <https://opencv-python-"
"tutroals.readthedocs.org/en/latest>`_ (Python bindings), `CellProfiler "
"<https://www.cellprofiler.org>`_, `ITK <https://itk.org/>`_ with Python "
"bindings"
msgstr ""

#: ../../scientific-python-lectures/advanced/index.rst:4
msgid "Advanced topics"
msgstr ""

#: ../../scientific-python-lectures/advanced/index.rst:6
msgid ""
"This part of the *Scientific Python Lectures* is dedicated to advanced "
"usage. It strives to educate the proficient Python coder to be an expert and"
" tackles various specific topics."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:3
msgid "Interfacing with C"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:5
msgid "**Author**: *Valentin Haenel*"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:14
msgid ""
"This chapter contains an *introduction* to the many different routes for "
"making your native code (primarily ``C/C++``) available from Python, a "
"process commonly referred to *wrapping*. The goal of this chapter is to give"
" you a flavour of what technologies exist and what their respective merits "
"and shortcomings are, so that you can select the appropriate one for your "
"specific needs. In any case, once you do start wrapping, you almost "
"certainly will want to consult the respective documentation for your "
"selected technique."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:28
#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:7
msgid "Introduction"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:30
msgid "This chapter covers the following techniques:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:32
msgid "`Python-C-Api <https://docs.python.org/3/c-api/>`_"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:33
msgid "`Ctypes <https://docs.python.org/3/library/ctypes.html>`_"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:34
msgid ""
"`SWIG (Simplified Wrapper and Interface Generator) <https://www.swig.org/>`_"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:35
msgid "`Cython <https://cython.org/>`__"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:37
msgid ""
"These four techniques are perhaps the most well known ones, of which Cython "
"is probably the most advanced one and the one you should consider using "
"first. The others are also important, if you want to understand the wrapping"
" problem from different angles. Having said that, there are other "
"alternatives out there, but having understood the basics of the ones above, "
"you will be in a position to evaluate the technique of your choice to see if"
" it fits your needs."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:44
msgid "The following criteria may be useful when evaluating a technology:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:46
msgid "Are additional libraries required?"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:47
msgid "Is the code autogenerated?"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:48
msgid "Does it need to be compiled?"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:49
msgid "Is there good support for interacting with NumPy arrays?"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:50
msgid "Does it support C++?"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:52
msgid ""
"Before you set out, you should consider your use case. When interfacing with"
" native code, there are usually two use-cases that come up:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:55
msgid ""
"Existing code in C/C++ that needs to be leveraged, either because it already"
" exists, or because it is faster."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:57
msgid "Python code too slow, push inner loops to native code"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:59
msgid ""
"Each technology is demonstrated by wrapping the ``cos`` function from "
"``math.h``. While this is a mostly a trivial example, it should serve us "
"well to demonstrate the basics of the wrapping solution. Since each "
"technique also includes some form of NumPy support, this is also "
"demonstrated using an example where the cosine is computed on some kind of "
"array."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:65
msgid "Last but not least, two small warnings:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:67
msgid ""
"All of these techniques may crash (segmentation fault) the Python "
"interpreter, which is (usually) due to bugs in the C code."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:69
msgid ""
"All the examples have been done on Linux, they *should* be possible on other"
" operating systems."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:71
msgid "You will need a C compiler for most of the examples."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:75
msgid "Python-C-Api"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:77
msgid ""
"The `Python-C-API <https://docs.python.org/3/c-api/>`_ is the backbone of "
"the standard Python interpreter (a.k.a *CPython*). Using this API it is "
"possible to write Python extension module in C and C++. Obviously, these "
"extension modules can, by virtue of language compatibility, call any "
"function written in C or C++."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:83
msgid ""
"When using the Python-C-API, one usually writes much boilerplate code, first"
" to parse the arguments that were given to a function, and later to "
"construct the return type."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:87
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:256
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:422
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:647
msgid "**Advantages**"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:89
msgid "Requires no additional libraries"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:90
msgid "Lots of low-level control"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:91
msgid "Entirely usable from C++"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:93
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:262
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:427
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:655
msgid "**Disadvantages**"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:95
msgid "May require a substantial amount of effort"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:96
msgid "Much overhead in the code"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:97
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:657
msgid "Must be compiled"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:98
msgid "High maintenance cost"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:99
msgid "No forward compatibility across Python versions as C-API changes"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:100
msgid "Reference count bugs are easy to create and very hard to track down."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:104
msgid ""
"The Python-C-Api example here serves mainly for didactic reasons. Many of "
"the other techniques actually depend on this, so it is good to have a high-"
"level understanding of how it works. In 99% of the use-cases you will be "
"better off, using an alternative technique."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:111
msgid ""
"Since reference counting bugs are easy to create and hard to track down, "
"anyone really needing to use the Python C-API should read the `section about"
" objects, types and reference counts "
"<https://docs.python.org/3/c-api/intro.html#objects-types-and-reference-"
"counts>`_ from the official python documentation. Additionally, there is a "
"tool by the name of `cpychecker <https://gcc-python-"
"plugin.readthedocs.io/en/latest/cpychecker.html>`_ which can help discover "
"common errors with reference counting."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:123
msgid ""
"The following C-extension module, make the ``cos`` function from the "
"standard math library available to Python:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:129
msgid ""
"As you can see, there is much boilerplate, both to «massage» the arguments "
"and return types into place and for the module initialisation. Although some"
" of this is amortised, as the extension grows, the boilerplate required for "
"each function(s) remains."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:134
msgid ""
"The standard python build system, ``setuptools``, supports compiling "
"C-extensions via a ``setup.py`` file:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:140
msgid "The setup file is called as follows:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:160
msgid "``build_ext`` is to build extension modules"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:161
msgid ""
"``--inplace`` will output the compiled extension module into the current "
"directory"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:163
msgid ""
"The file ``cos_module.so`` contains the compiled extension, which we can now"
" load in the IPython interpreter:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:167
msgid ""
"In Python 3, the filename for compiled modules includes metadata on the "
"Python interpreter (see `PEP 3149 <https://peps.python.org/pep-3149/>`_) and"
" is thus longer. The import statement is not affected by this."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:194
msgid "Now let's see how robust this is:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:207
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:336
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:547
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:751
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:824
msgid "NumPy Support"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:209
msgid ""
"Analog to the Python-C-API, NumPy, which is itself implemented as a "
"C-extension, comes with the `NumPy-C-API "
"<https://numpy.org/doc/stable/reference/c-api>`_. This API can be used to "
"create and manipulate NumPy arrays from C, when writing a custom "
"C-extension. See also: :ref:`advanced_numpy`."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:217
msgid ""
"If you do ever need to use the NumPy C-API refer to the documentation about "
"`Arrays <https://numpy.org/doc/stable/reference/c-api/array.html>`_ and "
"`Iterators <https://numpy.org/doc/stable/reference/c-api/iterator.html>`_."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:222
msgid ""
"The following example shows how to pass NumPy arrays as arguments to "
"functions and how to iterate over NumPy arrays using the (old) NumPy-C-API. "
"It simply takes an array as argument applies the cosine function from the "
"``math.h`` and returns a resulting new array."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:230
msgid ""
"To compile this we can use ``setuptools`` again. However we need to be sure "
"to include the NumPy headers by using :func:`numpy.get_include`."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:236
msgid ""
"To convince ourselves if this does actually works, we run the following test"
" script:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:242
msgid "And this should result in the following figure:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:249
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:827
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:889
msgid "Ctypes"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:251
msgid ""
"`Ctypes <https://docs.python.org/3/library/ctypes.html>`_ is a *foreign "
"function library* for Python. It provides C compatible data types, and "
"allows calling functions in DLLs or shared libraries. It can be used to wrap"
" these libraries in pure Python."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:258
msgid "Part of the Python standard library"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:259
msgid "Does not need to be compiled"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:260
msgid "Wrapping code entirely in Python"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:264
msgid ""
"Requires code to be wrapped to be available as a shared library (roughly "
"speaking ``*.dll`` in Windows ``*.so`` in Linux and ``*.dylib`` in Mac OSX.)"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:266
msgid "No good support for C++"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:271
msgid "As advertised, the wrapper code is in pure Python."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:276
msgid ""
"Finding and loading the library may vary depending on your operating system,"
" check `the documentation "
"<https://docs.python.org/3/library/ctypes.html#loading-dynamic-link-"
"libraries>`_ for details"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:280
msgid ""
"This may be somewhat deceptive, since the math library exists in compiled "
"form on the system already. If you were to wrap a in-house library, you "
"would have to compile it first, which may or may not require some additional"
" effort."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:284
msgid "We may now use this, as before:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:318
msgid ""
"As with the previous example, this code is somewhat robust, although the "
"error message is not quite as helpful, since it does not tell us what the "
"type should be."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:338
msgid ""
"NumPy contains some support for interfacing with ctypes. In particular there"
" is support for exporting certain attributes of a NumPy array as ctypes "
"data-types and there are functions to convert from C arrays to NumPy arrays "
"and back."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:344
msgid ""
"For more information, consult the corresponding section in the `NumPy "
"Cookbook <https://www.scipy.org/Cookbook/Ctypes>`_ and the API documentation"
" for `numpy.ndarray.ctypes "
"<https://numpy.org/doc/stable/reference/generated/numpy.ndarray.ctypes.html>`_"
" and `numpy.ctypeslib "
"<https://numpy.org/doc/stable/reference/routines.ctypeslib.html>`_."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:349
msgid ""
"For the following example, let's consider a C function in a library that "
"takes an input and an output array, computes the cosine of the input array "
"and stores the result in the output array."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:353
msgid ""
"The library consists of the following header file (although this is not "
"strictly needed for this example, we list it for completeness):"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:359
msgid "The function implementation resides in the following C source file:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:364
msgid ""
"And since the library is pure C, we can't use ``setuptools`` to compile it, "
"but must use a combination of ``make`` and ``gcc``:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:370
msgid ""
"We can then compile this (on Linux) into the shared library "
"``libcos_doubles.so``:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:384
msgid ""
"Now we can proceed to wrap this library via ctypes with direct support for "
"(certain kinds of) NumPy arrays:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:390
msgid ""
"Note the inherent limitation of contiguous single dimensional NumPy arrays, "
"since the C functions requires this kind of buffer."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:392
msgid ""
"Also note that the output array must be preallocated, for example with "
":func:`numpy.zeros` and the function will write into it's buffer."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:394
msgid ""
"Although the original signature of the ``cos_doubles`` function is ``ARRAY, "
"ARRAY, int`` the final ``cos_doubles_func`` takes only two NumPy arrays as "
"arguments."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:398
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:612
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:806
msgid "And, as before, we convince ourselves that it worked:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:407
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:895
msgid "SWIG"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:409
msgid ""
"`SWIG <https://www.swig.org/>`_, the Simplified Wrapper Interface Generator,"
" is a software development tool that connects programs written in C and C++ "
"with a variety of high-level programming languages, including Python. The "
"important thing with SWIG is, that it can autogenerate the wrapper code for "
"you. While this is an advantage in terms of development time, it can also be"
" a burden. The generated file tend to be quite large and may not be too "
"human readable and the multiple levels of indirection which are a result of "
"the wrapping process, may be a bit tricky to understand."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:420
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:645
msgid "The autogenerated C code uses the Python-C-Api."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:424
msgid "Can automatically wrap entire libraries given the headers"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:425
msgid "Works nicely with C++"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:429
msgid "Autogenerates enormous files"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:430
msgid "Hard to debug if something goes wrong"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:431
msgid "Steep learning curve"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:436
msgid ""
"Let's imagine that our ``cos`` function lives in a ``cos_module`` which has "
"been written in ``c`` and consists of the source file ``cos_module.c``:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:442
msgid "and the header file ``cos_module.h``:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:447
msgid ""
"And our goal is to expose the ``cos_func`` to Python. To achieve this with "
"SWIG, we must write an *interface file* which contains the instructions for "
"SWIG."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:453
msgid ""
"As you can see, not too much code is needed here. For this simple example it"
" is enough to simply include the header file in the interface file, to "
"expose the function to Python. However, SWIG does allow for more fine "
"grained inclusion/exclusion of functions found in header files, check the "
"documentation for details."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:459
msgid "Generating the compiled wrappers is a two stage process:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:461
msgid ""
"Run the ``swig``  executable on the interface file to generate the files "
"``cos_module_wrap.c``, which is the source file for the autogenerated Python"
" C-extension and ``cos_module.py``, which is the autogenerated pure python "
"module."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:466
msgid ""
"Compile the ``cos_module_wrap.c`` into the ``_cos_module.so``. Luckily, "
"``setuptools`` knows how to handle SWIG interface files, so that our "
"``setup.py`` is simply:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:494
msgid ""
"We can now load and execute the ``cos_module`` as we have done in the "
"previous examples:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:533
msgid ""
"Again we test for robustness, and we see that we get a better error message "
"(although, strictly speaking in Python there is no ``double`` type):"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:549
msgid ""
"NumPy provides `support for SWIG "
"<https://numpy.org/doc/stable/reference/swig.html>`_ with the ``numpy.i`` "
"file. This interface file defines various so-called *typemaps* which support"
" conversion between NumPy arrays and C-Arrays. In the following example we "
"will take a quick look at how such typemaps work in practice."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:555
msgid "We have the same ``cos_doubles`` function as in the ctypes example:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:563
msgid ""
"This is wrapped as ``cos_doubles_func`` using the following SWIG interface "
"file:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:569
msgid "To use the NumPy typemaps, we need include the ``numpy.i`` file."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:570
msgid ""
"Observe the call to ``import_array()`` which we encountered already in the "
"NumPy-C-API example."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:572
msgid ""
"Since the type maps only support the signature ``ARRAY, SIZE`` we need to "
"wrap the ``cos_doubles`` as ``cos_doubles_func`` which takes two arrays "
"including sizes as input."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:575
msgid ""
"As opposed to the simple SWIG example, we don't include the "
"``cos_doubles.h`` header, There is nothing there that we wish to expose to "
"Python since we expose the functionality through ``cos_doubles_func``."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:579
msgid "And, as before we can use ``setuptools`` to wrap this:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:584
msgid ""
"As previously, we need to use ``include_dirs`` to specify the location."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:624
msgid ""
"`Cython <https://cython.org/>`__ is both a Python-like language for writing "
"C-extensions and an advanced compiler for this language. The Cython "
"*language* is a superset of Python, which comes with additional constructs "
"that allow you call C functions and annotate variables and class attributes "
"with c types. In this sense one could also call it a *Python with types*."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:630
msgid ""
"In addition to the basic use case of wrapping native code, Cython supports "
"an additional use-case, namely interactive optimization. Basically, one "
"starts out with a pure-Python script and incrementally adds Cython types to "
"the bottleneck code to optimize only those code paths that really matter."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:635
msgid ""
"In this sense it is quite similar to SWIG, since the code can be "
"autogenerated but in a sense it also quite similar to ctypes since the "
"wrapping code can (almost) be written in Python."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:639
msgid ""
"While others solutions that autogenerate code can be quite difficult to "
"debug (for example SWIG) Cython comes with an extension to the GNU debugger "
"that helps debug Python, Cython and C code."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:649
msgid "Python like language for writing C-extensions"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:650
msgid "Autogenerated code"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:651
msgid "Supports incremental optimization"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:652
msgid "Includes a GNU debugger extension"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:653
msgid "Support for C++ (Since version 0.13)"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:658
msgid ""
"Requires an additional library ( but only at build time, at this problem can"
" be overcome by shipping the generated C files)"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:664
msgid ""
"The main Cython code for our ``cos_module`` is contained in the file "
"``cos_module.pyx``:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:670
msgid ""
"Note the additional keywords such as ``cdef`` and ``extern``. Also the "
"``cos_func`` is then pure Python."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:673
msgid ""
"Again we can use the standard ``setuptools`` module, but this time we need "
"some additional pieces from ``Cython.Build``:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:678
msgid "Compiling this:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:696
msgid "And running it:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:728
msgid ""
"And, testing a little for robustness, we can see that we get good error "
"messages:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:742
msgid ""
"Additionally, it is worth noting that ``Cython`` ships with complete "
"declarations for the C math library, which simplifies the code above to "
"become:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:748
msgid ""
"In this case the ``cimport`` statement is used to import the ``cos`` "
"function."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:753
msgid ""
"Cython has support for NumPy via the ``numpy.pyx`` file which allows you to "
"add the NumPy array type to your Cython code. I.e. like specifying that "
"variable ``i`` is of type ``int``, you can specify that variable ``a`` is of"
" type ``numpy.ndarray`` with a given ``dtype``. Also, certain optimizations "
"such as bounds checking are supported. Look at the corresponding section in "
"the `Cython documentation "
"<https://docs.cython.org/en/latest/src/tutorial/numpy.html>`_. In case you "
"want to pass NumPy arrays as C arrays to your Cython wrapped C functions, "
"there is a `section about this in the Cython documentation "
"<https://docs.cython.org/en/latest/src/userguide/memoryviews.html#pass-data-"
"from-a-c-function-via-pointer>`__."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:763
msgid ""
"In the following example, we will show how to wrap the familiar "
"``cos_doubles`` function using Cython."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:772
msgid ""
"This is wrapped as ``cos_doubles_func`` using the following Cython code:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:777
msgid "And can be compiled using ``setuptools``:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:782
msgid ""
"As with the previous compiled NumPy examples, we need the ``include_dirs`` "
"option."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:819
msgid ""
"In this section four different techniques for interfacing with native code "
"have been presented. The table below roughly summarizes some of the aspects "
"of the techniques."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:824
msgid "x"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:824
msgid "Part of CPython"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:824
msgid "Compiled"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:824
msgid "Autogenerated"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:826
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:871
msgid "Python-C-API"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:826
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:827
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:828
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:829
msgid "``True``"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:826
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:827
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:828
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:829
msgid "``False``"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:828
msgid "Swig"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:832
msgid ""
"Of all three presented techniques, Cython is the most modern and advanced. "
"In particular, the ability to optimize code incrementally by adding types to"
" your Python code is unique."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:837
msgid "Further Reading and References"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:839
msgid ""
"`Gaël Varoquaux's blog post about avoiding data copies <https://gael-"
"varoquaux.info/programming/cython-example-of-exposing-c-computed-arrays-in-"
"python-without-data-copies.html>`_ provides some insight on how to handle "
"memory management cleverly. If you ever run into issues with large datasets,"
" this is a reference to come back to for some inspiration."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:845
msgid "Exercises"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:847
msgid ""
"Since this is a brand new section, the exercises are considered more as "
"pointers as to what to look at next, so pick the ones that you find more "
"interesting. If you have good ideas for exercises, please let us know!"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:851
msgid ""
"Download the source code for each example and compile and run them on your "
"machine."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:853
msgid ""
"Make trivial changes to each example and convince yourself that this works. "
"( E.g. change ``cos`` for ``sin``.)"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:855
msgid ""
"Most of the examples, especially the ones involving NumPy may still be "
"fragile and respond badly to input errors. Look for ways to crash the "
"examples, figure what the problem is and devise a potential solution. Here "
"are some ideas:"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:860
msgid "Numerical overflow."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:861
msgid "Input and output arrays that have different lengths."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:862
msgid "Multidimensional array."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:863
msgid "Empty array"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:864
msgid "Arrays with non-``double`` types"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:866
msgid ""
"Use the ``%timeit`` IPython magic to measure the execution time of the "
"various solutions"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:873
msgid ""
"Modify the NumPy example such that the function takes two input arguments, "
"where the second is the preallocated output array, making it similar to the "
"other NumPy examples."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:875
msgid ""
"Modify the example such that the function only takes a single input array "
"and modifies this in place."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:877
msgid ""
"Try to fix the example to use the new `NumPy iterator protocol "
"<https://numpy.org/doc/stable/reference/c-api/iterator.html>`_. If you "
"manage to obtain a working solution, please submit a pull-request on github."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:880
msgid ""
"You may have noticed, that the NumPy-C-API example is the only NumPy example"
" that does not wrap ``cos_doubles`` but instead applies the ``cos`` function"
" directly to the elements of the NumPy array. Does this have any advantages "
"over the other techniques."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:884
msgid ""
"Can you wrap ``cos_doubles`` using only the NumPy-C-API. You may need to "
"ensure that the arrays have the correct type, are one dimensional and "
"contiguous in memory."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:891
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:899
#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:915
msgid ""
"Modify the NumPy example such that ``cos_doubles_func`` handles the "
"preallocation for you, thus making it more like the NumPy-C-API example."
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:897
msgid ""
"Look at the code that SWIG autogenerates, how much of it do you understand?"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:901
msgid ""
"Modify the ``cos_doubles``  C function so that it returns an allocated "
"array. Can you wrap this using SWIG typemaps? If not, why not? Is there a "
"workaround for this specific situation? (Hint: you know the size of the "
"output array, so it may be possible to construct a NumPy array from the "
"returned ``double *``.)"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:910
msgid ""
"Look at the code that Cython autogenerates. Take a closer look at some of "
"the comments that Cython inserts. What do you see?"
msgstr ""

#: ../../scientific-python-lectures/advanced/interfacing_with_c/interfacing_with_c.rst:912
msgid ""
"Look at the section `Working with NumPy "
"<https://docs.cython.org/en/latest/src/tutorial/numpy.html>`_ from the "
"Cython documentation  to learn how to incrementally optimize a pure python "
"script that uses NumPy."
msgstr ""

#: ../../../../../../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:3
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:4
msgid "Examples for the mathematical optimization chapter"
msgstr ""

#: ../../../../../../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:22
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:23
msgid ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_noisy.py`"
msgstr ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_noisy.py`"

#: ../../../../../../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:39
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:40
msgid ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_smooth.py`"
msgstr ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_smooth.py`"

#: ../../../../../../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:56
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:57
msgid ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_curve_fitting.py`"
msgstr ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_curve_fitting.py`"

#: ../../../../../../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:73
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:74
msgid ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_convex.py`"
msgstr ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_convex.py`"

#: ../../../../../../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:90
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:91
msgid ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_exercise_flat_minimum.py`"
msgstr ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_exercise_flat_minimum.py`"

#: ../../../../../../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:107
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:108
msgid ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_non_bounds_constraints.py`"
msgstr ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_non_bounds_constraints.py`"

#: ../../../../../../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:124
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:125
msgid ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_1d_optim.py`"
msgstr ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_1d_optim.py`"

#: ../../../../../../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:141
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:142
msgid ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_constraints.py`"
msgstr ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_constraints.py`"

#: ../../../../../../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:158
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:159
msgid ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_exercise_ill_conditioned.py`"
msgstr ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_exercise_ill_conditioned.py`"

#: ../../../../../../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:175
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:176
msgid ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_compare_optimizers.py`"
msgstr ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_compare_optimizers.py`"

#: ../../../../../../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:192
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:193
msgid ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_gradient_descent.py`"
msgstr ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_gradient_descent.py`"

#: ../../../../../../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:229
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:230
msgid ""
":download:`Download all examples in Python source code: "
"auto_examples_python.zip "
"</advanced/mathematical_optimization/auto_examples/auto_examples_python.zip>`"
msgstr ""
":download:`Download all examples in Python source code: "
"auto_examples_python.zip "
"</advanced/mathematical_optimization/auto_examples/auto_examples_python.zip>`"

#: ../../../../../../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:233
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/index.rst:234
msgid ""
":download:`Download all examples in Jupyter notebooks: "
"auto_examples_jupyter.zip "
"</advanced/mathematical_optimization/auto_examples/auto_examples_jupyter.zip>`"
msgstr ""
":download:`Download all examples in Jupyter notebooks: "
"auto_examples_jupyter.zip "
"</advanced/mathematical_optimization/auto_examples/auto_examples_jupyter.zip>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_1d_optim.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_mathematical_optimization_auto_examples_plot_1d_optim.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_1d_optim.rst:22
msgid "Brent's method"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_1d_optim.rst:24
msgid "Illustration of 1D optimization: Brent's method"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_1d_optim.rst:100
msgid ""
":download:`Download Jupyter notebook: plot_1d_optim.ipynb "
"<plot_1d_optim.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_1d_optim.ipynb "
"<plot_1d_optim.ipynb>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_1d_optim.rst:104
msgid ""
":download:`Download Python source code: plot_1d_optim.py <plot_1d_optim.py>`"
msgstr ""
":download:`Download Python source code: plot_1d_optim.py <plot_1d_optim.py>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_1d_optim.rst:108
msgid ":download:`Download zipped: plot_1d_optim.zip <plot_1d_optim.zip>`"
msgstr ":download:`Download zipped: plot_1d_optim.zip <plot_1d_optim.zip>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_compare_optimizers.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_mathematical_optimization_auto_examples_plot_compare_optimizers.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_compare_optimizers.rst:22
msgid "Plotting the comparison of optimizers"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_compare_optimizers.rst:24
msgid "Plots the results from the comparison of optimizers."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_compare_optimizers.rst:138
msgid ""
":download:`Download Jupyter notebook: plot_compare_optimizers.ipynb "
"<plot_compare_optimizers.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_compare_optimizers.ipynb "
"<plot_compare_optimizers.ipynb>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_compare_optimizers.rst:142
msgid ""
":download:`Download Python source code: plot_compare_optimizers.py "
"<plot_compare_optimizers.py>`"
msgstr ""
":download:`Download Python source code: plot_compare_optimizers.py "
"<plot_compare_optimizers.py>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_compare_optimizers.rst:146
msgid ""
":download:`Download zipped: plot_compare_optimizers.zip "
"<plot_compare_optimizers.zip>`"
msgstr ""
":download:`Download zipped: plot_compare_optimizers.zip "
"<plot_compare_optimizers.zip>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_constraints.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_mathematical_optimization_auto_examples_plot_constraints.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_constraints.rst:22
msgid "Constraint optimization: visualizing the geometry"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_constraints.rst:24
msgid "A small figure explaining optimization with constraints"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_constraints.rst:99
msgid ""
":download:`Download Jupyter notebook: plot_constraints.ipynb "
"<plot_constraints.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_constraints.ipynb "
"<plot_constraints.ipynb>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_constraints.rst:103
msgid ""
":download:`Download Python source code: plot_constraints.py "
"<plot_constraints.py>`"
msgstr ""
":download:`Download Python source code: plot_constraints.py "
"<plot_constraints.py>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_constraints.rst:107
msgid ""
":download:`Download zipped: plot_constraints.zip <plot_constraints.zip>`"
msgstr ""
":download:`Download zipped: plot_constraints.zip <plot_constraints.zip>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_convex.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_mathematical_optimization_auto_examples_plot_convex.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_convex.rst:22
msgid "Convex function"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_convex.rst:24
msgid "A figure showing the definition of a convex function"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_convex.rst:79
msgid ""
":download:`Download Jupyter notebook: plot_convex.ipynb <plot_convex.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_convex.ipynb <plot_convex.ipynb>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_convex.rst:83
msgid ""
":download:`Download Python source code: plot_convex.py <plot_convex.py>`"
msgstr ""
":download:`Download Python source code: plot_convex.py <plot_convex.py>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_convex.rst:87
msgid ":download:`Download zipped: plot_convex.zip <plot_convex.zip>`"
msgstr ":download:`Download zipped: plot_convex.zip <plot_convex.zip>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_curve_fitting.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_mathematical_optimization_auto_examples_plot_curve_fitting.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_curve_fitting.rst:22
#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:915
msgid "Curve fitting"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_curve_fitting.rst:24
msgid "A curve fitting example"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_curve_fitting.rst:69
msgid ""
":download:`Download Jupyter notebook: plot_curve_fitting.ipynb "
"<plot_curve_fitting.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_curve_fitting.ipynb "
"<plot_curve_fitting.ipynb>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_curve_fitting.rst:73
msgid ""
":download:`Download Python source code: plot_curve_fitting.py "
"<plot_curve_fitting.py>`"
msgstr ""
":download:`Download Python source code: plot_curve_fitting.py "
"<plot_curve_fitting.py>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_curve_fitting.rst:77
msgid ""
":download:`Download zipped: plot_curve_fitting.zip <plot_curve_fitting.zip>`"
msgstr ""
":download:`Download zipped: plot_curve_fitting.zip <plot_curve_fitting.zip>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_exercise_flat_minimum.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_mathematical_optimization_auto_examples_plot_exercise_flat_minimum.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_exercise_flat_minimum.rst:22
msgid "Finding a minimum in a flat neighborhood"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_exercise_flat_minimum.rst:24
msgid ""
"An exercise of finding minimum. This exercise is hard because the function "
"is very flat around the minimum (all its derivatives are zero). Thus "
"gradient information is unreliable."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_exercise_flat_minimum.rst:28
msgid ""
"The function admits a minimum in [0, 0]. The challenge is to get within 1e-7"
" of this minimum, starting at x0 = [1, 1]."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_exercise_flat_minimum.rst:31
msgid ""
"The solution that we adopt here is to give up on using gradient or "
"information based on local differences, and to rely on the Powell algorithm."
" With 162 function evaluations, we get to 1e-8 of the solution."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_exercise_flat_minimum.rst:67
#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_exercise_ill_conditioned.rst:61
msgid "Some pretty plotting"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_exercise_flat_minimum.rst:105
msgid ""
":download:`Download Jupyter notebook: plot_exercise_flat_minimum.ipynb "
"<plot_exercise_flat_minimum.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_exercise_flat_minimum.ipynb "
"<plot_exercise_flat_minimum.ipynb>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_exercise_flat_minimum.rst:109
msgid ""
":download:`Download Python source code: plot_exercise_flat_minimum.py "
"<plot_exercise_flat_minimum.py>`"
msgstr ""
":download:`Download Python source code: plot_exercise_flat_minimum.py "
"<plot_exercise_flat_minimum.py>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_exercise_flat_minimum.rst:113
msgid ""
":download:`Download zipped: plot_exercise_flat_minimum.zip "
"<plot_exercise_flat_minimum.zip>`"
msgstr ""
":download:`Download zipped: plot_exercise_flat_minimum.zip "
"<plot_exercise_flat_minimum.zip>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_exercise_ill_conditioned.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_mathematical_optimization_auto_examples_plot_exercise_ill_conditioned.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_exercise_ill_conditioned.rst:22
msgid "Alternating optimization"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_exercise_ill_conditioned.rst:24
msgid ""
"The challenge here is that Hessian of the problem is a very ill-conditioned "
"matrix. This can easily be seen, as the Hessian of the first term in simply "
"2 * K.T @ K. Thus the conditioning of the problem can be judged from looking"
" at the conditioning of K."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_exercise_ill_conditioned.rst:130
msgid ""
":download:`Download Jupyter notebook: plot_exercise_ill_conditioned.ipynb "
"<plot_exercise_ill_conditioned.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_exercise_ill_conditioned.ipynb "
"<plot_exercise_ill_conditioned.ipynb>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_exercise_ill_conditioned.rst:134
msgid ""
":download:`Download Python source code: plot_exercise_ill_conditioned.py "
"<plot_exercise_ill_conditioned.py>`"
msgstr ""
":download:`Download Python source code: plot_exercise_ill_conditioned.py "
"<plot_exercise_ill_conditioned.py>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_exercise_ill_conditioned.rst:138
msgid ""
":download:`Download zipped: plot_exercise_ill_conditioned.zip "
"<plot_exercise_ill_conditioned.zip>`"
msgstr ""
":download:`Download zipped: plot_exercise_ill_conditioned.zip "
"<plot_exercise_ill_conditioned.zip>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_gradient_descent.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_mathematical_optimization_auto_examples_plot_gradient_descent.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_gradient_descent.rst:22
msgid "Gradient descent"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_gradient_descent.rst:24
msgid ""
"An example demoing gradient descent by creating figures that trace the "
"evolution of the optimizer."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_gradient_descent.rst:58
msgid "A formatter to print values on contours"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_gradient_descent.rst:84
msgid ""
"A gradient descent algorithm do not use: its a toy, use scipy's "
"optimize.fmin_cg"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_gradient_descent.rst:225
msgid "Run different optimizers on these problems"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_gradient_descent.rst:346
msgid ""
":download:`Download Jupyter notebook: plot_gradient_descent.ipynb "
"<plot_gradient_descent.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_gradient_descent.ipynb "
"<plot_gradient_descent.ipynb>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_gradient_descent.rst:350
msgid ""
":download:`Download Python source code: plot_gradient_descent.py "
"<plot_gradient_descent.py>`"
msgstr ""
":download:`Download Python source code: plot_gradient_descent.py "
"<plot_gradient_descent.py>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_gradient_descent.rst:354
msgid ""
":download:`Download zipped: plot_gradient_descent.zip "
"<plot_gradient_descent.zip>`"
msgstr ""
":download:`Download zipped: plot_gradient_descent.zip "
"<plot_gradient_descent.zip>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_noisy.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_mathematical_optimization_auto_examples_plot_noisy.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_noisy.rst:22
msgid "Noisy optimization problem"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_noisy.rst:24
msgid "Draws a figure explaining noisy vs non-noisy optimization"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_noisy.rst:65
msgid ""
":download:`Download Jupyter notebook: plot_noisy.ipynb <plot_noisy.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_noisy.ipynb <plot_noisy.ipynb>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_noisy.rst:69
msgid ":download:`Download Python source code: plot_noisy.py <plot_noisy.py>`"
msgstr ""
":download:`Download Python source code: plot_noisy.py <plot_noisy.py>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_noisy.rst:73
msgid ":download:`Download zipped: plot_noisy.zip <plot_noisy.zip>`"
msgstr ":download:`Download zipped: plot_noisy.zip <plot_noisy.zip>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_non_bounds_constraints.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_mathematical_optimization_auto_examples_plot_non_bounds_constraints.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_non_bounds_constraints.rst:22
#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:946
msgid "Optimization with constraints"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_non_bounds_constraints.rst:24
msgid ""
"An example showing how to do optimization with general constraints using "
"SLSQP and cobyla."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_non_bounds_constraints.rst:92
msgid ""
":download:`Download Jupyter notebook: plot_non_bounds_constraints.ipynb "
"<plot_non_bounds_constraints.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_non_bounds_constraints.ipynb "
"<plot_non_bounds_constraints.ipynb>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_non_bounds_constraints.rst:96
msgid ""
":download:`Download Python source code: plot_non_bounds_constraints.py "
"<plot_non_bounds_constraints.py>`"
msgstr ""
":download:`Download Python source code: plot_non_bounds_constraints.py "
"<plot_non_bounds_constraints.py>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_non_bounds_constraints.rst:100
msgid ""
":download:`Download zipped: plot_non_bounds_constraints.zip "
"<plot_non_bounds_constraints.zip>`"
msgstr ""
":download:`Download zipped: plot_non_bounds_constraints.zip "
"<plot_non_bounds_constraints.zip>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_smooth.rst:13
msgid ""
":ref:`Go to the end "
"<sphx_glr_download_advanced_mathematical_optimization_auto_examples_plot_smooth.py>`"
" to download the full example code."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_smooth.rst:22
msgid "Smooth vs non-smooth"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_smooth.rst:24
msgid "Draws a figure to explain smooth versus non smooth optimization."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_smooth.rst:67
msgid ""
":download:`Download Jupyter notebook: plot_smooth.ipynb <plot_smooth.ipynb>`"
msgstr ""
":download:`Download Jupyter notebook: plot_smooth.ipynb <plot_smooth.ipynb>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_smooth.rst:71
msgid ""
":download:`Download Python source code: plot_smooth.py <plot_smooth.py>`"
msgstr ""
":download:`Download Python source code: plot_smooth.py <plot_smooth.py>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/plot_smooth.rst:75
msgid ":download:`Download zipped: plot_smooth.zip <plot_smooth.zip>`"
msgstr ":download:`Download zipped: plot_smooth.zip <plot_smooth.zip>`"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:9
msgid ""
"**00:00.000** total execution time for 11 files **from "
"advanced/mathematical_optimization/auto_examples**:"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:35
msgid ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_1d_optim.py`"
" (``plot_1d_optim.py``)"
msgstr ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_1d_optim.py`"
" (``plot_1d_optim.py``)"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:38
msgid ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_compare_optimizers.py`"
" (``plot_compare_optimizers.py``)"
msgstr ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_compare_optimizers.py`"
" (``plot_compare_optimizers.py``)"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:41
msgid ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_constraints.py`"
" (``plot_constraints.py``)"
msgstr ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_constraints.py`"
" (``plot_constraints.py``)"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:44
msgid ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_convex.py`"
" (``plot_convex.py``)"
msgstr ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_convex.py`"
" (``plot_convex.py``)"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:47
msgid ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_curve_fitting.py`"
" (``plot_curve_fitting.py``)"
msgstr ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_curve_fitting.py`"
" (``plot_curve_fitting.py``)"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:50
msgid ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_exercise_flat_minimum.py`"
" (``plot_exercise_flat_minimum.py``)"
msgstr ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_exercise_flat_minimum.py`"
" (``plot_exercise_flat_minimum.py``)"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:53
msgid ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_exercise_ill_conditioned.py`"
" (``plot_exercise_ill_conditioned.py``)"
msgstr ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_exercise_ill_conditioned.py`"
" (``plot_exercise_ill_conditioned.py``)"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:56
msgid ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_gradient_descent.py`"
" (``plot_gradient_descent.py``)"
msgstr ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_gradient_descent.py`"
" (``plot_gradient_descent.py``)"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:59
msgid ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_noisy.py`"
" (``plot_noisy.py``)"
msgstr ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_noisy.py`"
" (``plot_noisy.py``)"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:62
msgid ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_non_bounds_constraints.py`"
" (``plot_non_bounds_constraints.py``)"
msgstr ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_non_bounds_constraints.py`"
" (``plot_non_bounds_constraints.py``)"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/auto_examples/sg_execution_times.rst:65
msgid ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_smooth.py`"
" (``plot_smooth.py``)"
msgstr ""
":ref:`sphx_glr_advanced_mathematical_optimization_auto_examples_plot_smooth.py`"
" (``plot_smooth.py``)"

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:9
msgid "Mathematical optimization: finding minima of functions"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:11
msgid "**Authors**: *Gaël Varoquaux*"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:13
msgid ""
"`Mathematical optimization "
"<https://en.wikipedia.org/wiki/Mathematical_optimization>`_ deals with the "
"problem of finding numerically minimums (or maximums or zeros) of a "
"function. In this context, the function is called *cost function*, or "
"*objective function*, or *energy*."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:19
msgid ""
"Here, we are interested in using :mod:`scipy.optimize` for black-box "
"optimization: we do not rely on the mathematical expression of the function "
"that we are optimizing. Note that this expression can often be used for more"
" efficient, non black-box, optimization."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:28
msgid ":ref:`NumPy <numpy>`"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:29
msgid ":ref:`SciPy <scipy>`"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:30
msgid ":ref:`Matplotlib <matplotlib>`"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:32
msgid "**References**"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:34
msgid ""
"Mathematical optimization is very ... mathematical. If you want performance,"
" it really pays to read the books:"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:37
msgid ""
"`Convex Optimization <https://web.stanford.edu/~boyd/cvxbook/>`_ by Boyd and"
" Vandenberghe (pdf available free online)."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:40
msgid ""
"`Numerical Optimization "
"<https://users.eecs.northwestern.edu/~nocedal/book/num-opt.html>`_, by "
"Nocedal and Wright. Detailed reference on gradient descent methods."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:44
msgid ""
"`Practical Methods of Optimization "
"<https://www.amazon.com/gp/product/0471494631/ref=ox_sc_act_title_1?ie=UTF8&smid=ATVPDKIKX0DER>`_"
" by Fletcher: good at hand-waving explanations."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:59
msgid "Knowing your problem"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:61
msgid ""
"Not all optimization problems are equal. Knowing your problem enables you to"
" choose the right tool."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst-1
msgid "**Dimensionality of the problem**"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:66
msgid ""
"The scale of an optimization problem is pretty much set by the "
"*dimensionality of the problem*, i.e. the number of scalar variables on "
"which the search is performed."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:71
msgid "Convex versus non-convex optimization"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:79
msgid "|convex_1d_1|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:73
msgid "convex_1d_1"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:81
msgid "|convex_1d_2|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:75
msgid "convex_1d_2"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:83
msgid "**A convex function**:"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:85
msgid "`f` is above all its tangents."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:86
msgid ""
"equivalently, for two point A, B, f(C) lies below the segment [f(A), f(B])],"
" if A < C < B"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:89
msgid "**A non-convex function**"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:91
msgid ""
"**Optimizing convex functions is easy. Optimizing non-convex functions can "
"be very hard.**"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:94
msgid ""
"It can be proven that for a convex function a local minimum is also a global"
" minimum. Then, in some sense, the minimum is unique."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:98
msgid "Smooth and non-smooth problems"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:106
msgid "|smooth_1d_1|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:100
msgid "smooth_1d_1"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:108
msgid "|smooth_1d_2|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:102
msgid "smooth_1d_2"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:110
msgid "**A smooth function**:"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:112
msgid "The gradient is defined everywhere, and is a continuous function"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:114
msgid "**A non-smooth function**"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:116
msgid ""
"**Optimizing smooth functions is easier** (true in the context of *black-"
"box* optimization, otherwise `Linear Programming "
"<https://en.wikipedia.org/wiki/Linear_programming>`_ is an example of "
"methods which deal very efficiently with piece-wise linear functions)."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:125
msgid "Noisy versus exact cost functions"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:131
msgid "Noisy (blue) and non-noisy (green) functions"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:133
msgid "|noisy|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:127
msgid "noisy"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst-1
msgid "**Noisy gradients**"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:137
msgid ""
"Many optimization methods rely on gradients of the objective function. If "
"the gradient function is not given, they are computed numerically, which "
"induces errors. In such situation, even if the objective function is not "
"noisy, a gradient-based optimization may be a noisy optimization."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:144
msgid "Constraints"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:151
msgid "Optimizations under constraints"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:153
msgid "Here:"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:155
msgid ":math:`-1 < x_1 < 1`"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:157
msgid ":math:`-1 < x_2 < 1`"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:159
msgid "|constraints|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:146
msgid "constraints"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:163
msgid "A review of the different optimizers"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:166
msgid "Getting started: 1D optimization"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:168
msgid ""
"Let's get started by finding the minimum of the scalar function "
":math:`f(x)=\\exp[(x-0.5)^2]`. :func:`scipy.optimize.minimize_scalar` uses "
"Brent's method to find the minimum of a function:"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:200
msgid ""
"**Brent's method on a quadratic function**: it              converges in 3 "
"iterations, as the quadratic              approximation is then exact."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:204
msgid "|1d_optim_1|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:188
msgid "1d_optim_1"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:206
msgid "|1d_optim_2|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:191
msgid "1d_optim_2"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:208
msgid ""
"**Brent's method on a non-convex function**: note that              the fact"
" that the optimizer avoided the local minimum              is a matter of "
"luck."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:212
msgid "|1d_optim_3|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:194
msgid "1d_optim_3"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:214
msgid "|1d_optim_4|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:197
msgid "1d_optim_4"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:218
msgid "You can use different solvers using the parameter ``method``."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:222
msgid ""
":func:`scipy.optimize.minimize_scalar` can also be used for optimization "
"constrained to an interval using the parameter ``bounds``."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:226
msgid "Gradient based methods"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:229
msgid "Some intuitions about gradient descent"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:231
msgid "Here we focus on **intuitions**, not code. Code will follow."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:233
msgid ""
"`Gradient descent <https://en.wikipedia.org/wiki/Gradient_descent>`_ "
"basically consists in taking small steps in the direction of the gradient, "
"that is the direction of the *steepest descent*."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:249
msgid "**Fixed step gradient descent**"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:252
msgid "**A well-conditioned quadratic function.**"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:254
msgid "|gradient_quad_cond|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:237
msgid "gradient_quad_cond"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:256
msgid "|gradient_quad_cond_conv|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:240
msgid "gradient_quad_cond_conv"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:258
msgid "**An ill-conditioned quadratic function.**"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:260
msgid ""
"The core problem of gradient-methods on ill-conditioned problems is that the"
" gradient tends not to point in the direction of the minimum."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:264
msgid "|gradient_quad_icond|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:243
msgid "gradient_quad_icond"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:266
msgid "|gradient_quad_icond_conv|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:246
msgid "gradient_quad_icond_conv"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:268
msgid ""
"We can see that very anisotropic (`ill-conditioned "
"<https://en.wikipedia.org/wiki/Condition_number>`_) functions are harder to "
"optimize."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst-1
msgid "**Take home message: conditioning number and preconditioning**"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:274
msgid ""
"If you know natural scaling for your variables, prescale them so that they "
"behave similarly. This is related to `preconditioning "
"<https://en.wikipedia.org/wiki/Preconditioner>`_."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:278
msgid ""
"Also, it clearly can be advantageous to take bigger steps. This is done in "
"gradient descent code using a `line search "
"<https://en.wikipedia.org/wiki/Line_search>`_."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:307
msgid "**Adaptive step gradient descent**"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:310
msgid "A well-conditioned quadratic function."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:312
msgid "|agradient_quad_cond|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:282
msgid "agradient_quad_cond"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:314
msgid "|agradient_quad_cond_conv|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:285
msgid "agradient_quad_cond_conv"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:316
msgid "An ill-conditioned quadratic function."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:318
msgid "|agradient_quad_icond|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:288
msgid "agradient_quad_icond"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:320
msgid "|agradient_quad_icond_conv|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:291
msgid "agradient_quad_icond_conv"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:322
#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:366
msgid "An ill-conditioned non-quadratic function."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:324
msgid "|agradient_gauss_icond|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:294
msgid "agradient_gauss_icond"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:326
msgid "|agradient_gauss_icond_conv|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:297
msgid "agradient_gauss_icond_conv"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:328
#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:372
msgid "An ill-conditioned very non-quadratic function."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:330
msgid "|agradient_rosen_icond|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:300
msgid "agradient_rosen_icond"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:332
msgid "|agradient_rosen_icond_conv|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:303
msgid "agradient_rosen_icond_conv"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:334
msgid ""
"The more a function looks like a quadratic function (elliptic iso-curves), "
"the easier it is to optimize."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:338
msgid "Conjugate gradient descent"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:340
msgid ""
"The gradient descent algorithms above are toys not to be used on real "
"problems."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:343
msgid ""
"As can be seen from the above experiments, one of the problems of the simple"
" gradient descent algorithms, is that it tends to oscillate across a valley,"
" each time following the direction of the gradient, that makes it cross the "
"valley. The conjugate gradient solves this problem by adding a *friction* "
"term: each step depends on the two last values of the gradient and sharp "
"turns are reduced."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:363
msgid "**Conjugate gradient descent**"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:368
msgid "|cg_gauss_icond|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:350
msgid "cg_gauss_icond"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:370
msgid "|cg_gauss_icond_conv|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:353
msgid "cg_gauss_icond_conv"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:374
msgid "|cg_rosen_icond|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:356
msgid "cg_rosen_icond"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:376
msgid "|cg_rosen_icond_conv|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:359
msgid "cg_rosen_icond_conv"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:378
msgid ""
"SciPy provides :func:`scipy.optimize.minimize` to find the minimum of scalar"
" functions of one or more variables. The simple conjugate gradient method "
"can be used by setting the parameter ``method`` to CG ::"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:395
msgid ""
"Gradient methods need the Jacobian (gradient) of the function. They can "
"compute it numerically, but will perform better if you can pass them the "
"gradient::"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:411
msgid ""
"Note that the function has only been evaluated 27 times, compared to 108 "
"without the gradient."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:415
msgid "Newton and quasi-newton methods"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:418
msgid "Newton methods: using the Hessian (2nd differential)"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:420
msgid ""
"`Newton methods "
"<https://en.wikipedia.org/wiki/Newton%27s_method_in_optimization>`_ use a "
"local quadratic approximation to compute the jump direction. For this "
"purpose, they rely on the 2 first derivative of the function: the *gradient*"
" and the `Hessian <https://en.wikipedia.org/wiki/Hessian_matrix>`_."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:449
#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:563
#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:658
msgid "**An ill-conditioned quadratic function:**"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:451
msgid ""
"Note that, as the quadratic approximation is exact, the Newton method is "
"blazing fast"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:454
msgid "|ncg_quad_icond|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:427
msgid "ncg_quad_icond"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:456
msgid "|ncg_quad_icond_conv|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:430
msgid "ncg_quad_icond_conv"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:458
#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:572
#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:705
msgid "**An ill-conditioned non-quadratic function:**"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:460
msgid ""
"Here we are optimizing a Gaussian, which is always below its quadratic "
"approximation. As a result, the Newton method overshoots and leads to "
"oscillations."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:464
msgid "|ncg_gauss_icond|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:433
msgid "ncg_gauss_icond"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:466
msgid "|ncg_gauss_icond_conv|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:436
msgid "ncg_gauss_icond_conv"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:468
#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:581
#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:667
#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:711
msgid "**An ill-conditioned very non-quadratic function:**"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:470
msgid "|ncg_rosen_icond|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:439
msgid "ncg_rosen_icond"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:472
msgid "|ncg_rosen_icond_conv|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:442
msgid "ncg_rosen_icond_conv"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:474
msgid ""
"In SciPy, you can use the Newton method by setting ``method`` to Newton-CG "
"in :func:`scipy.optimize.minimize`. Here, CG refers to the fact that an "
"internal inversion of the Hessian is performed by conjugate gradient ::"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:494
msgid ""
"Note that compared to a conjugate gradient (above), Newton's method has "
"required less function evaluations, but more gradient evaluations, as it "
"uses it to approximate the Hessian. Let's compute the Hessian and pass it to"
" the algorithm::"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:515
msgid ""
"At very high-dimension, the inversion of the Hessian can be costly and "
"unstable (large scale > 250)."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:520
msgid ""
"Newton optimizers should not to be confused with Newton's root finding "
"method, based on the same principles, :func:`scipy.optimize.newton`."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:526
msgid "Quasi-Newton methods: approximating the Hessian on the fly"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:528
msgid ""
"**BFGS**: BFGS (Broyden-Fletcher-Goldfarb-Shanno algorithm) refines at each "
"step an approximation of the Hessian."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:565
msgid ""
"On a exactly quadratic function, BFGS is not as fast as Newton's method, but"
" still very fast."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:568
msgid "|bfgs_quad_icond|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:531
msgid "bfgs_quad_icond"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:570
msgid "|bfgs_quad_icond_conv|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:534
msgid "bfgs_quad_icond_conv"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:574
msgid ""
"Here BFGS does better than Newton, as its empirical estimate of the "
"curvature is better than that given by the Hessian."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:577
msgid "|bfgs_gauss_icond|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:537
msgid "bfgs_gauss_icond"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:579
msgid "|bfgs_gauss_icond_conv|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:540
msgid "bfgs_gauss_icond_conv"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:583
msgid "|bfgs_rosen_icond|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:553
msgid "bfgs_rosen_icond"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:585
msgid "|bfgs_rosen_icond_conv|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:556
msgid "bfgs_rosen_icond_conv"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:606
msgid ""
"**L-BFGS:** Limited-memory BFGS Sits between BFGS and conjugate gradient: in"
" very high dimensions (> 250) the Hessian matrix is too costly to compute "
"and invert. L-BFGS keeps a low-rank version. In addition, box bounds are "
"also supported by L-BFGS-B::"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:628
msgid "Gradient-less methods"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:631
msgid "A shooting method: the Powell algorithm"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:633
msgid "Almost a gradient approach"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:660
msgid ""
"Powell's method isn't too sensitive to local ill-conditionning in low "
"dimensions"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:663
msgid "|powell_quad_icond|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:635
msgid "powell_quad_icond"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:665
msgid "|powell_quad_icond_conv|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:638
msgid "powell_quad_icond_conv"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:669
msgid "|powell_rosen_icond|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:648
msgid "powell_rosen_icond"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:671
msgid "|powell_rosen_icond_conv|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:651
msgid "powell_rosen_icond_conv"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:675
msgid "Simplex method: the Nelder-Mead"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:677
msgid ""
"The Nelder-Mead algorithms is a generalization of dichotomy approaches to "
"high-dimensional spaces. The algorithm works by refining a `simplex "
"<https://en.wikipedia.org/wiki/Simplex>`_, the generalization of intervals "
"and triangles to high-dimensional spaces, to bracket the minimum."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:682
msgid ""
"**Strong points**: it is robust to noise, as it does not rely on computing "
"gradients. Thus it can work on functions that are not locally smooth such as"
" experimental data points, as long as they display a large-scale bell-shape "
"behavior. However it is slower than gradient-based methods on smooth, non-"
"noisy functions."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:707
msgid "|nm_gauss_icond|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:688
msgid "nm_gauss_icond"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:709
msgid "|nm_gauss_icond_conv|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:691
msgid "nm_gauss_icond_conv"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:713
msgid "|nm_rosen_icond|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:695
msgid "nm_rosen_icond"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:715
msgid "|nm_rosen_icond_conv|"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:698
msgid "nm_rosen_icond_conv"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:717
msgid "Using the Nelder-Mead solver in :func:`scipy.optimize.minimize`::"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:734
msgid "Global optimizers"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:736
msgid ""
"If your problem does not admit a unique local minimum (which can be hard to "
"test unless the function is convex), and you do not have prior information "
"to initialize the optimization close to the solution, you may need a global "
"optimizer."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:742
msgid "Brute force: a grid search"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:744
msgid ""
":func:`scipy.optimize.brute` evaluates the function on a given grid of "
"parameters and returns the parameters corresponding to the minimum value. "
"The parameters are specified with ranges given to :obj:`numpy.mgrid`. By "
"default, 20 steps are taken in each direction::"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:756
msgid "Practical guide to optimization with SciPy"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:759
msgid "Choosing a method"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:761
msgid ""
"All methods are exposed as the ``method`` argument of "
":func:`scipy.optimize.minimize`."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:0
msgid "Without knowledge of the gradient"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:770
msgid ""
"In general, prefer **BFGS** or **L-BFGS**, even if you have to approximate "
"numerically gradients. These are also the default if you omit the parameter "
"``method`` - depending if the problem has constraints or bounds"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:774
msgid ""
"On well-conditioned problems, **Powell** and **Nelder-Mead**, both gradient-"
"free methods, work well in high dimension, but they collapse for ill-"
"conditioned problems."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:0
msgid "With knowledge of the gradient"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:780
msgid "**BFGS** or **L-BFGS**."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:782
msgid ""
"Computational overhead of BFGS is larger than that L-BFGS, itself larger "
"than that of conjugate gradient. On the other side, BFGS usually needs less "
"function evaluations than CG. Thus conjugate gradient method is better than "
"BFGS at optimizing computationally cheap functions."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:0
msgid "With the Hessian"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:789
msgid ""
"If you can compute the Hessian, prefer the Newton method (**Newton-CG** or "
"**TCG**)."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:0
msgid "If you have noisy measurements"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:794
msgid "Use **Nelder-Mead** or **Powell**."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:797
msgid "Making your optimizer faster"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:799
msgid ""
"Choose the right method (see above), do compute analytically the gradient "
"and Hessian, if you can."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:802
msgid ""
"Use `preconditionning <https://en.wikipedia.org/wiki/Preconditioner>`_ when "
"possible."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:805
msgid ""
"Choose your initialization points wisely. For instance, if you are running "
"many similar optimizations, warm-restart one with the results of another."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:809
msgid ""
"Relax the tolerance if you don't need precision using the parameter ``tol``."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:812
msgid "Computing gradients"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:814
msgid ""
"Computing gradients, and even more Hessians, is very tedious but worth the "
"effort. Symbolic computation with :ref:`Sympy <sympy>` may come in handy."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:820
msgid ""
"A *very* common source of optimization not converging well is human error in"
" the computation of the gradient. You can use "
":func:`scipy.optimize.check_grad` to check that your gradient is correct. It"
" returns the norm of the different between the gradient given, and a "
"gradient computed numerically:"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:829
msgid "See also :func:`scipy.optimize.approx_fprime` to find your errors."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:832
msgid "Synthetic exercises"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst-1
msgid "**Exercise: A simple (?) quadratic function**"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:850
msgid "Optimize the following function, using K[0] as a starting point::"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:858
msgid ""
"Time your approach. Find the fastest approach. Why is BFGS not working well?"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:832
msgid "**Exercise: A locally flat minimum**"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:864
msgid ""
"Consider the function `exp(-1/(.1*x**2 + y**2)`. This function admits a "
"minimum in (0, 0). Starting from an initialization at (1, 1), try to get "
"within 1e-8 of this minimum point."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:834
msgid "flat_min_0"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:838
msgid "flat_min_1"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:872
msgid "Special case: non-linear least-squares"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:875
msgid "Minimizing the norm of a vector function"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:877
msgid ""
"Least square problems, minimizing the norm of a vector function, have a "
"specific structure that can be used in the `Levenberg–Marquardt algorithm "
"<https://en.wikipedia.org/wiki/Levenberg-Marquardt_algorithm>`_ implemented "
"in :func:`scipy.optimize.leastsq`."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:882
msgid "Lets try to minimize the norm of the following vectorial function::"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:892
msgid ""
"This took 67 function evaluations (check it with 'full_output=True'). What "
"if we compute the norm ourselves and use a good generic optimizer (BFGS)::"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:901
msgid "BFGS needs more function calls, and gives a less precise result."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:905
msgid ""
"`leastsq` is interesting compared to BFGS only if the dimensionality of the "
"output vector is large, and larger than the number of parameters to "
"optimize."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:911
msgid ""
"If the function is linear, this is a linear-algebra problem, and should be "
"solved with :func:`scipy.linalg.lstsq`."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:922
msgid ""
"Least square problems occur often when fitting a non-linear to data. While "
"it is possible to construct our optimization problem ourselves, SciPy "
"provides a helper function for this purpose: "
":func:`scipy.optimize.curve_fit`::"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:943
msgid "Do the same with omega = 3. What is the difficulty?"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:949
msgid "Box bounds"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:951
msgid ""
"Box bounds correspond to limiting each of the individual parameters of the "
"optimization. Note that some problems that are not originally written as box"
" bounds can be rewritten as such via change of variables. Both "
":func:`scipy.optimize.minimize_scalar` and :func:`scipy.optimize.minimize` "
"support bound constraints with the parameter ``bounds``::"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:978
msgid "General constraints"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:980
msgid ""
"Equality and inequality constraints specified as functions: :math:`f(x) = 0`"
" and :math:`g(x) < 0`."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:983
msgid ""
":func:`scipy.optimize.fmin_slsqp` Sequential least square programming: "
"equality and inequality constraints:"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:1013
msgid ""
"The above problem is known as the `Lasso "
"<https://en.wikipedia.org/wiki/Lasso_(statistics)>`_ problem in statistics, "
"and there exist very efficient solvers for it (for instance in `scikit-learn"
" <https://scikit-learn.org>`_). In general do not use generic solvers when "
"specific ones exist."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst-1
msgid "**Lagrange multipliers**"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:1021
msgid ""
"If you are ready to do a bit of math, many constrained optimization problems"
" can be converted to non-constrained optimization problems using a "
"mathematical trick known as `Lagrange multipliers "
"<https://en.wikipedia.org/wiki/Lagrange_multiplier>`_."
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:1035
msgid "**Other Software**"
msgstr ""

#: ../../scientific-python-lectures/advanced/mathematical_optimization/index.rst:1037
msgid ""
"SciPy tries to include the best well-established, general-use, and "
"permissively-licensed optimization algorithms available. However, even "
"better options for a given task may be available in other libraries; please "
"also see IPOPT_ and PyGMO_."
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:5
msgid "Optimizing code"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst-1
msgid "Donald Knuth"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:9
msgid "*“Premature optimization is the root of all evil”*"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:13
msgid "This chapter deals with strategies to make Python code go faster."
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:17
msgid "`line_profiler <https://pypi.org/project/line-profiler/>`_"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:25
msgid "Optimization workflow"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:27
msgid "Make it work: write the code in a simple **legible** ways."
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:29
msgid ""
"Make it work reliably: write automated test cases, make really sure that "
"your algorithm is right and that if you break it, the tests will capture the"
" breakage."
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:33
msgid ""
"Optimize the code by profiling simple use-cases to find the bottlenecks and "
"speeding up these bottleneck, finding a better algorithm or implementation. "
"Keep in mind that a trade off should be found between profiling on a "
"realistic example and the simplicity and speed of execution of the code. For"
" efficient work, it is best to work with profiling runs lasting around 10s."
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:42
msgid "Profiling Python code"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:42
msgid "**No optimization without measuring!**"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:46
msgid "**Measure:** profiling, timing"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:48
msgid "You'll have surprises: the fastest code is not always what you think"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:53
msgid "Timeit"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:55
msgid ""
"In IPython, use ``timeit`` (https://docs.python.org/3/library/timeit.html) "
"to time elementary operations:"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:72
msgid "Use this to guide your choice between strategies."
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:76
msgid ""
"For long running calls, using ``%time`` instead of ``%timeit``; it is less "
"precise but faster"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:80
msgid "Profiler"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:82
msgid ""
"Useful when you have a large program to profile, for example the "
":download:`following file <demo.py>`:"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:89
msgid ""
"This is a combination of two unsupervised learning techniques, principal "
"component analysis (`PCA "
"<httsp://en.wikipedia.org/wiki/Principal_component_analysis>`_) and "
"independent component analysis (`ICA "
"<https://en.wikipedia.org/wiki/Independent_component_analysis>`_). PCA is a "
"technique for dimensionality reduction, i.e. an algorithm to explain the "
"observed variance in your data using less dimensions. ICA is a source "
"separation technique, for example to unmix multiple signals that have been "
"recorded through multiple sensors. Doing a PCA first and then an ICA can be "
"useful if you have more sensors than signals. For more information see: `the"
" FastICA example from scikits-learn <https://scikit-"
"learn.org/stable/auto_examples/decomposition/plot_ica_blind_source_separation.html>`_."
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:101
msgid ""
"To run it, you also need to download the :download:`ica module <ica.py>`. In"
" IPython we can time the script:"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:112
msgid "and profile it:"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:146
msgid ""
"Clearly the ``svd`` (in `decomp.py`) is what takes most of our time, a.k.a. "
"the bottleneck. We have to find a way to make this step go faster, or to "
"avoid this step (algorithmic optimization). Spending time on the rest of the"
" code is useless."
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst-1
msgid "**Profiling outside of IPython, running ``cProfile``**"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:153
msgid ""
"Similar profiling can be done outside of IPython, simply calling the built-"
"in `Python profilers <https://docs.python.org/3/library/profile.html>`_ "
"``cProfile`` and ``profile``."
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:162
msgid ""
"Using the ``-o`` switch will output the profiler results to the file "
"``demo.prof`` to view with an external tool. This can be useful if you wish "
"to process the profiler output with a visualization tool."
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:168
msgid "Line-profiler"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:170
msgid ""
"The profiler tells us which function takes most of the time, but not where "
"it is called."
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:173
msgid ""
"For this, we use the `line_profiler <https://pypi.org/project/line-"
"profiler/>`_: in the source file, we decorate a few functions that we want "
"to inspect with ``@profile`` (no need to import it)"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:188
msgid ""
"Then we run the script using the `kernprof <https://pypi.org/project/line-"
"profiler/>`_ command, with switches ``-l, --line-by-line`` and ``-v, "
"--view`` to use the line-by-line profiler and view the results in addition "
"to saving them:"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:212
msgid "**The SVD is taking all the time.** We need to optimise this line."
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:216
msgid "Making code go faster"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:218
msgid ""
"Once we have identified the bottlenecks, we need to make the corresponding "
"code go faster."
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:222
msgid "Algorithmic optimization"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:224
msgid ""
"The first thing to look for is algorithmic optimization: are there ways to "
"compute less, or better?"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:227
msgid ""
"For a high-level view of the problem, a good understanding of the maths "
"behind the algorithm helps. However, it is not uncommon to find simple "
"changes, like **moving computation or memory allocation outside a for "
"loop**, that bring in big gains."
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:233
msgid "Example of the SVD"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:235
msgid ""
"In both examples above, the SVD - `Singular Value Decomposition "
"<https://en.wikipedia.org/wiki/Singular_value_decomposition>`_ - is what "
"takes most of the time. Indeed, the computational cost of this algorithm is "
"roughly :math:`n^3` in the size of the input matrix."
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:241
msgid ""
"However, in both of these example, we are not using all the output of the "
"SVD, but only the first few rows of its first return argument. If we use the"
" ``svd`` implementation of SciPy, we can ask for an incomplete version of "
"the SVD. Note that implementations of linear algebra in SciPy are richer "
"then those in NumPy and should be preferred."
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:264
msgid ""
"We can then use this insight to :download:`optimize the previous code "
"<demo_opt.py>`:"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:288
msgid ""
"Real incomplete SVDs, e.g. computing only the first 10 eigenvectors, can be "
"computed with arpack, available in ``scipy.sparse.linalg.eigsh``."
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst-1
msgid "Computational linear algebra"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:293
msgid ""
"For certain algorithms, many of the bottlenecks will be linear algebra "
"computations. In this case, using the right function to solve the right "
"problem is key. For instance, an eigenvalue problem with a symmetric matrix "
"is easier to solve than with a general matrix. Also, most often, you can "
"avoid inverting a matrix and use a less costly (and more numerically stable)"
" operation."
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:300
msgid ""
"Know your computational linear algebra. When in doubt, explore "
"``scipy.linalg``, and use ``%timeit`` to try out different alternatives on "
"your data."
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:305
msgid "Writing faster numerical code"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:307
msgid ""
"A complete discussion on advanced use of NumPy is found in chapter "
":ref:`advanced_numpy`, or in the article `The NumPy array: a structure for "
"efficient numerical computation <https://hal.inria.fr/inria-00564007/en>`_ "
"by van der Walt et al. Here we discuss only some commonly encountered tricks"
" to make code faster."
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:314
msgid "**Vectorizing for loops**"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:316
msgid ""
"Find tricks to avoid for loops using NumPy arrays. For this, masks and "
"indices arrays can be useful."
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:319
msgid "**Broadcasting**"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:321
msgid ""
"Use :ref:`broadcasting <broadcasting>` to do operations on arrays as small "
"as possible before combining them."
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:327
msgid "**In place operations**"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:340
msgid ""
"**note**: we need `global a` in the timeit so that it work, as it is "
"assigning to `a`, and thus considers it as a local variable."
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:343
msgid "**Be easy on the memory: use views, and not copies**"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:345
msgid ""
"Copying big arrays is as costly as making simple numerical operations on "
"them:"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:359
msgid "**Beware of cache effects**"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:361
msgid ""
"Memory access is cheaper when it is grouped: accessing a big array in a "
"continuous way is much faster than random access. This implies amongst other"
" things that **smaller strides are faster** (see :ref:`cache_effects`):"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:380
msgid ""
"This is the reason why Fortran ordering or C ordering may make a big "
"difference on operations:"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:399
msgid ""
"Note that copying the data to work around this effect may not be worth it:"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:406
msgid ""
"Using `numexpr <https://github.com/pydata/numexpr>`_ can be useful to "
"automatically optimize code for such effects."
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:409
msgid "**Use compiled code**"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:411
msgid ""
"The last resort, once you are sure that all the high-level optimizations "
"have been explored, is to transfer the hot spots, i.e. the few lines or "
"functions in which most of the time is spent, to compiled code. For compiled"
" code, the preferred option is to use `Cython <https://www.cython.org>`_: it"
" is easy to transform exiting Python code in compiled code, and with a good "
"use of the `NumPy support "
"<https://docs.cython.org/en/latest/src/tutorial/numpy.html>`_ yields "
"efficient code on NumPy arrays, for instance by unrolling loops."
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:422
msgid ""
"For all the above: profile and time your choices. Don't base your "
"optimization on theoretical considerations."
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:426
msgid "Additional Links"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:428
msgid ""
"If you need to profile memory usage, you could try the `memory_profiler "
"<https://pypi.org/project/memory-profiler>`_"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:431
msgid ""
"If you need to profile down into C extensions, you could try using "
"`gperftools <https://github.com/gperftools/gperftools>`_ from Python with "
"`yep <https://pypi.org/project/yep>`_."
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:436
msgid ""
"If you would like to track performance of your code across time, i.e. as you"
" make new commits to your repository, you could try: `asv "
"<https://asv.readthedocs.io/en/stable/>`_"
msgstr ""

#: ../../scientific-python-lectures/advanced/optimizing/index.rst:440
msgid ""
"If you need some interactive visualization why not try `RunSnakeRun "
"<https://www.vrplumber.com/programming/runsnakerun/>`_"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/bsr_array.rst:7
msgid "Block Compressed Row Format (BSR)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/bsr_array.rst:9
msgid ""
"basically a CSR with dense sub-matrices of fixed shape instead of scalar "
"items"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/bsr_array.rst:10
msgid ""
"block size `(R, C)` must evenly divide the shape of the matrix `(M, N)`"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/bsr_array.rst:11
#: ../../scientific-python-lectures/advanced/scipy_sparse/csc_array.rst:10
#: ../../scientific-python-lectures/advanced/scipy_sparse/csr_array.rst:9
msgid "three NumPy arrays: `indices`, `indptr`, `data`"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/bsr_array.rst:12
msgid "`indices` is array of column indices for each block"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/bsr_array.rst:13
msgid "`data` is array of corresponding nonzero values of shape `(nnz, R, C)`"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/bsr_array.rst:15
#: ../../scientific-python-lectures/advanced/scipy_sparse/csc_array.rst:20
#: ../../scientific-python-lectures/advanced/scipy_sparse/csr_array.rst:19
msgid "subclass of :class:`_cs_matrix` (common CSR/CSC functionality)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/bsr_array.rst:16
#: ../../scientific-python-lectures/advanced/scipy_sparse/coo_array.rst:14
msgid ""
"subclass of :class:`_data_matrix` (sparse matrix classes with `.data` "
"attribute)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/bsr_array.rst:18
#: ../../scientific-python-lectures/advanced/scipy_sparse/csc_array.rst:23
#: ../../scientific-python-lectures/advanced/scipy_sparse/csr_array.rst:22
msgid "fast matrix vector products and other arithmetic (sparsetools)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/bsr_array.rst:19
#: ../../scientific-python-lectures/advanced/scipy_sparse/coo_array.rst:17
#: ../../scientific-python-lectures/advanced/scipy_sparse/csc_array.rst:24
#: ../../scientific-python-lectures/advanced/scipy_sparse/csr_array.rst:23
#: ../../scientific-python-lectures/advanced/scipy_sparse/dia_array.rst:21
#: ../../scientific-python-lectures/advanced/scipy_sparse/dok_array.rst:13
#: ../../scientific-python-lectures/advanced/scipy_sparse/lil_array.rst:13
msgid "constructor accepts:"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/bsr_array.rst:20
#: ../../scientific-python-lectures/advanced/scipy_sparse/coo_array.rst:18
#: ../../scientific-python-lectures/advanced/scipy_sparse/csc_array.rst:25
#: ../../scientific-python-lectures/advanced/scipy_sparse/csr_array.rst:24
#: ../../scientific-python-lectures/advanced/scipy_sparse/dia_array.rst:22
#: ../../scientific-python-lectures/advanced/scipy_sparse/dok_array.rst:14
#: ../../scientific-python-lectures/advanced/scipy_sparse/lil_array.rst:14
msgid "dense array/matrix"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/bsr_array.rst:21
#: ../../scientific-python-lectures/advanced/scipy_sparse/coo_array.rst:19
#: ../../scientific-python-lectures/advanced/scipy_sparse/csc_array.rst:26
#: ../../scientific-python-lectures/advanced/scipy_sparse/csr_array.rst:25
#: ../../scientific-python-lectures/advanced/scipy_sparse/dia_array.rst:23
#: ../../scientific-python-lectures/advanced/scipy_sparse/dok_array.rst:15
#: ../../scientific-python-lectures/advanced/scipy_sparse/lil_array.rst:15
msgid "sparse array/matrix"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/bsr_array.rst:22
#: ../../scientific-python-lectures/advanced/scipy_sparse/csc_array.rst:27
#: ../../scientific-python-lectures/advanced/scipy_sparse/csr_array.rst:26
#: ../../scientific-python-lectures/advanced/scipy_sparse/dia_array.rst:24
#: ../../scientific-python-lectures/advanced/scipy_sparse/dok_array.rst:16
#: ../../scientific-python-lectures/advanced/scipy_sparse/lil_array.rst:16
msgid "shape tuple (create empty array)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/bsr_array.rst:23
#: ../../scientific-python-lectures/advanced/scipy_sparse/coo_array.rst:21
#: ../../scientific-python-lectures/advanced/scipy_sparse/csc_array.rst:28
#: ../../scientific-python-lectures/advanced/scipy_sparse/csr_array.rst:27
msgid "`(data, coords)` tuple"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/bsr_array.rst:24
#: ../../scientific-python-lectures/advanced/scipy_sparse/csc_array.rst:29
#: ../../scientific-python-lectures/advanced/scipy_sparse/csr_array.rst:28
msgid "`(data, indices, indptr)` tuple"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/bsr_array.rst:25
msgid ""
"many arithmetic operations considerably more efficient than CSR for sparse "
"matrices with dense sub-matrices"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/bsr_array.rst:27
#: ../../scientific-python-lectures/advanced/scipy_sparse/coo_array.rst:27
#: ../../scientific-python-lectures/advanced/scipy_sparse/csc_array.rst:32
#: ../../scientific-python-lectures/advanced/scipy_sparse/csr_array.rst:31
#: ../../scientific-python-lectures/advanced/scipy_sparse/dia_array.rst:27
#: ../../scientific-python-lectures/advanced/scipy_sparse/dok_array.rst:21
#: ../../scientific-python-lectures/advanced/scipy_sparse/lil_array.rst:19
msgid "use:"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/bsr_array.rst:28
msgid "like CSR"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/bsr_array.rst:29
msgid "vector-valued finite element discretizations"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/bsr_array.rst:32
#: ../../scientific-python-lectures/advanced/scipy_sparse/coo_array.rst:35
#: ../../scientific-python-lectures/advanced/scipy_sparse/csc_array.rst:36
#: ../../scientific-python-lectures/advanced/scipy_sparse/csr_array.rst:35
#: ../../scientific-python-lectures/advanced/scipy_sparse/dia_array.rst:33
#: ../../scientific-python-lectures/advanced/scipy_sparse/dok_array.rst:25
#: ../../scientific-python-lectures/advanced/scipy_sparse/lil_array.rst:24
#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:32
msgid "Examples"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/bsr_array.rst:34
msgid "create empty BSR array with (1, 1) block size (like CSR...)::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/bsr_array.rst:45
msgid "create empty BSR array with (3, 2) block size::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/bsr_array.rst:56
msgid "a bug?"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/bsr_array.rst:58
msgid ""
"create using `(data, coords)` tuple with (1, 1) block size (like CSR...)::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/bsr_array.rst:88
msgid "create using `(data, indices, indptr)` tuple with (2, 2) block size::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/coo_array.rst:7
msgid "Coordinate Format (COO)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/coo_array.rst:9
msgid "also known as the 'ijv' or 'triplet' format"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/coo_array.rst:10
msgid "three NumPy arrays: `row`, `col`, `data`."
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/coo_array.rst:11
msgid "attribute `coords` is the tuple `(row, col)`"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/coo_array.rst:12
msgid "`data[i]` is value at `(row[i], col[i])` position"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/coo_array.rst:13
msgid "permits duplicate entries"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/coo_array.rst:16
msgid "fast format for constructing sparse arrays"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/coo_array.rst:20
msgid "shape tuple (create empty matrix)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/coo_array.rst:22
msgid "very fast conversion to and from CSR/CSC formats"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/coo_array.rst:23
#: ../../scientific-python-lectures/advanced/scipy_sparse/dia_array.rst:18
msgid "fast matrix * vector (sparsetools)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/coo_array.rst:24
#: ../../scientific-python-lectures/advanced/scipy_sparse/dia_array.rst:19
msgid "fast and easy item-wise operations"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/coo_array.rst:25
#: ../../scientific-python-lectures/advanced/scipy_sparse/dia_array.rst:20
msgid "manipulate data array directly (fast NumPy machinery)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/coo_array.rst:26
msgid "no slicing, no arithmetic (directly, converts to CSR)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/coo_array.rst:28
msgid "facilitates fast conversion among sparse formats"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/coo_array.rst:29
msgid ""
"when converting to other format (usually CSR or CSC), duplicate entries are "
"summed together"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/coo_array.rst:32
msgid "facilitates efficient construction of finite element matrices"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/coo_array.rst:37
msgid "create empty COO array::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/coo_array.rst:45
msgid "create using `(data, ij)` tuple::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/coo_array.rst:60
msgid "duplicates entries are summed together::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/coo_array.rst:72
msgid "no slicing...::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/csc_array.rst:7
msgid "Compressed Sparse Column Format (CSC)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/csc_array.rst:9
msgid "column oriented"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/csc_array.rst:11
msgid "`indices` is array of row indices"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/csc_array.rst:12
#: ../../scientific-python-lectures/advanced/scipy_sparse/csr_array.rst:11
msgid "`data` is array of corresponding nonzero values"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/csc_array.rst:13
msgid "`indptr` points to column starts in `indices` and `data`"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/csc_array.rst:14
msgid ""
"length is `n_col + 1`, last item = number of values = length of both "
"`indices` and `data`"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/csc_array.rst:16
msgid ""
"nonzero values of the `i`-th column are `data[indptr[i]:indptr[i+1]]` with "
"row indices `indices[indptr[i]:indptr[i+1]]`"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/csc_array.rst:18
msgid ""
"item `(i, j)` can be accessed as `data[indptr[j]+k]`, where `k` is position "
"of `i` in `indices[indptr[j]:indptr[j+1]]`"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/csc_array.rst:21
#: ../../scientific-python-lectures/advanced/scipy_sparse/csr_array.rst:20
#: ../../scientific-python-lectures/advanced/scipy_sparse/dia_array.rst:12
msgid ""
"subclass of :class:`_data_matrix` (sparse array classes with `.data` "
"attribute)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/csc_array.rst:30
msgid "efficient column slicing, column-oriented operations"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/csc_array.rst:31
msgid "slow row slicing, expensive changes to the sparsity structure"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/csc_array.rst:33
#: ../../scientific-python-lectures/advanced/scipy_sparse/csr_array.rst:32
msgid "actual computations (most linear solvers support this format)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/csc_array.rst:38
msgid "create empty CSC array::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/csc_array.rst:46
#: ../../scientific-python-lectures/advanced/scipy_sparse/csr_array.rst:45
msgid "create using `(data, coords)` tuple::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/csc_array.rst:66
#: ../../scientific-python-lectures/advanced/scipy_sparse/csr_array.rst:65
msgid "create using `(data, indices, indptr)` tuple::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/csr_array.rst:6
msgid "Compressed Sparse Row Format (CSR)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/csr_array.rst:8
msgid "row oriented"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/csr_array.rst:10
msgid "`indices` is array of column indices"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/csr_array.rst:12
msgid "`indptr` points to row starts in `indices` and `data`"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/csr_array.rst:13
msgid ""
"length of `indptr` is `n_row + 1`, last item = number of values = length of "
"both `indices` and `data`"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/csr_array.rst:15
msgid ""
"nonzero values of the `i`-th row are `data[indptr[i]:indptr[i + 1]]` with "
"column indices `indices[indptr[i]:indptr[i + 1]]`"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/csr_array.rst:17
msgid ""
"item `(i, j)` can be accessed as `data[indptr[i] + k]`, where `k` is "
"position of `j` in `indices[indptr[i]:indptr[i + 1]]`"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/csr_array.rst:29
msgid "efficient row slicing, row-oriented operations"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/csr_array.rst:30
msgid "slow column slicing, expensive changes to the sparsity structure"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/csr_array.rst:37
msgid "create empty CSR array::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/dia_array.rst:7
msgid "Diagonal Format (DIA)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/dia_array.rst:9
msgid "very simple scheme"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/dia_array.rst:10
msgid "diagonals in dense NumPy array of shape `(n_diag, length)`"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/dia_array.rst:11
msgid "fixed length -> waste space a bit when far from main diagonal"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/dia_array.rst:14
msgid "offset for each diagonal"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/dia_array.rst:15
msgid "0 is the main diagonal"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/dia_array.rst:16
msgid "negative offset = below"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/dia_array.rst:17
msgid "positive offset = above"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/dia_array.rst:25
msgid "`(data, offsets)` tuple"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/dia_array.rst:26
msgid "no slicing, no individual item access"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/dia_array.rst:28
msgid "rather specialized"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/dia_array.rst:29
msgid "solving PDEs by finite differences"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/dia_array.rst:30
msgid "with an iterative solver"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/dia_array.rst:35
msgid "create some DIA arrays::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/dia_array.rst:84
msgid "explanation with a scheme::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/dia_array.rst:96
msgid "matrix-vector multiplication"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/dok_array.rst:7
msgid "Dictionary of Keys Format (DOK)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/dok_array.rst:9
msgid "subclass of Python dict"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/dok_array.rst:10
msgid "keys are `(row, column)` index tuples (no duplicate entries allowed)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/dok_array.rst:11
msgid "values are corresponding non-zero values"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/dok_array.rst:12
#: ../../scientific-python-lectures/advanced/scipy_sparse/lil_array.rst:12
msgid "efficient for constructing sparse arrays incrementally"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/dok_array.rst:17
msgid "efficient O(1) access to individual elements"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/dok_array.rst:18
#: ../../scientific-python-lectures/advanced/scipy_sparse/lil_array.rst:17
msgid "flexible slicing, changing sparsity structure is efficient"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/dok_array.rst:19
msgid "can be efficiently converted to a coo_array once constructed"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/dok_array.rst:20
msgid "slow arithmetic (`for` loops with `dict.items()`)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/dok_array.rst:22
#: ../../scientific-python-lectures/advanced/scipy_sparse/lil_array.rst:20
msgid "when sparsity pattern is not known apriori or changes"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/dok_array.rst:27
msgid "create a DOK array element by element::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/dok_array.rst:46
msgid "slicing and indexing::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/index.rst:2
msgid "Sparse Arrays in SciPy"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/index.rst:4
msgid "**Author**: *Robert Cimrman*"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:9
msgid "(dense) matrix is:"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:11
msgid "mathematical object"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:12
msgid "data structure for storing a 2D array of values"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:14
msgid "important features:"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:16
msgid "memory allocated once for all items"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:17
msgid "usually a contiguous chunk, think NumPy ndarray"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:18
msgid "*fast* access to individual items (*)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:21
msgid "Why Sparse Matrices?"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:23
msgid "the memory grows like `n**2` for dense matrix"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:24
msgid "small example (double precision matrix)::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:37
msgid "Sparse Matrices vs. Sparse Matrix Storage Schemes"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:39
msgid "sparse matrix is a matrix, which is *almost empty*"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:40
msgid "storing all the zeros is wasteful -> store only nonzero items"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:41
msgid "think **compression**"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:42
msgid "pros: huge memory savings"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:43
msgid ""
"cons: slow access to individual items, but it depends on actual storage "
"scheme."
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:46
msgid "Typical Applications"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:48
msgid "solution of partial differential equations (PDEs)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:49
msgid "the *finite element method*"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:50
msgid "mechanical engineering, electrotechnics, physics, ..."
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:51
msgid "graph theory"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:52
msgid "nonzero at `(i, j)` means that node `i` is connected to node `j`"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:53
msgid "natural language processing"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:54
msgid "nonzero at `(i, j)` means that the document `i` contains the word `j`"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:62
msgid ":ref:`numpy <numpy>`"
msgstr ":ref:`numpy <numpy>`"

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:63
msgid ":ref:`scipy <scipy>`"
msgstr ":ref:`scipy <scipy>`"

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:64
msgid ":ref:`matplotlib (optional) <matplotlib>`"
msgstr ":ref:`matplotlib (オプション) <matplotlib>`"

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:65
msgid ":ref:`ipython (the enhancements come handy) <interactive_work>`"
msgstr ":ref:`ipython (機能拡張は便利) <interactive_work>`"

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:68
msgid "Sparsity Structure Visualization"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:70
msgid ":func:`spy` from ``matplotlib``"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/introduction.rst:71
msgid "example plots:"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/lil_array.rst:6
msgid "List of Lists Format (LIL)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/lil_array.rst:8
msgid "row-based linked list"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/lil_array.rst:9
msgid ""
"each row is a Python list (sorted) of column indices of non-zero elements"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/lil_array.rst:10
msgid "rows stored in a NumPy array (`dtype=np.object`)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/lil_array.rst:11
msgid "non-zero values data stored analogously"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/lil_array.rst:18
msgid "slow arithmetic, slow column slicing due to being row-based"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/lil_array.rst:21
msgid "example: reading a sparse array from a text file"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/lil_array.rst:26
msgid "create an empty LIL array::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/lil_array.rst:30
msgid "prepare random data::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/lil_array.rst:38
msgid "assign the data using fancy indexing::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/lil_array.rst:62
msgid "more slicing and indexing::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/other_packages.rst:2
msgid "Other Interesting Packages"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/other_packages.rst:4
msgid "PyAMG"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/other_packages.rst:5
msgid "algebraic multigrid solvers"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/other_packages.rst:6
msgid "https://github.com/pyamg/pyamg"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/other_packages.rst:7
msgid "Pysparse"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/other_packages.rst:8
msgid "own sparse matrix classes"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/other_packages.rst:9
msgid "matrix and eigenvalue problem solvers"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/other_packages.rst:10
msgid "https://pysparse.sourceforge.net/"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:2
msgid "Linear System Solvers"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:4
msgid ""
"sparse matrix/eigenvalue problem solvers live in :mod:`scipy.sparse.linalg`"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:5
msgid "the submodules:"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:6
msgid ":mod:`dsolve`: direct factorization methods for solving linear systems"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:7
msgid ":mod:`isolve`: iterative methods for solving linear systems"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:8
msgid ":mod:`eigen`: sparse eigenvalue problem solvers"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:10
msgid "all solvers are accessible from::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:18
msgid "Sparse Direct Solvers"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:20
msgid "default solver: SuperLU"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:21
msgid "included in SciPy"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:22
#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:25
msgid "real and complex systems"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:23
msgid "both single and double precision"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:24
msgid "optional: umfpack"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:26
msgid "double precision only"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:27
msgid "recommended for performance"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:28
msgid "wrappers now live in :mod:`scikits.umfpack`"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:29
msgid "check-out the new :mod:`scikits.suitesparse` by Nathaniel Smith"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:33
msgid "import the whole module, and see its docstring::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:39
msgid ""
"both superlu and umfpack can be used (if the latter is installed) as "
"follows:"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:42
msgid "prepare a linear system::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:54
msgid "solve as single precision real::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:63
msgid "solve as double precision real::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:72
msgid "solve as single precision complex::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:81
msgid "solve as double precision complex::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:92
msgid ":download:`examples/direct_solve.py`"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:95
msgid "Iterative Solvers"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:97
msgid "the :mod:`isolve` module contains the following solvers:"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:98
msgid "``bicg`` (BIConjugate Gradient)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:99
msgid "``bicgstab`` (BIConjugate Gradient STABilized)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:100
msgid ""
"``cg`` (Conjugate Gradient) - symmetric positive definite matrices only"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:102
msgid "``cgs`` (Conjugate Gradient Squared)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:103
msgid "``gmres`` (Generalized Minimal RESidual)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:104
msgid "``minres`` (MINimum RESidual)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:105
msgid "``qmr`` (Quasi-Minimal Residual)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:108
msgid "Common Parameters"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:110
msgid "mandatory:"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:112
msgid "A"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst-1
msgid "{sparse array/matrix, dense array/matrix, LinearOperator}"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:113
msgid "The N-by-N matrix of the linear system."
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:114
msgid "b"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst-1
msgid "{array, matrix}"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:115
msgid "Right hand side of the linear system. Has shape (N,) or (N,1)."
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:117
msgid "optional:"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:119
msgid "x0"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:120
msgid "Starting guess for the solution."
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:121
msgid "tol"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst-1
msgid "float"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:122
msgid "Relative tolerance to achieve before terminating."
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:123
msgid "maxiter"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst-1
msgid "integer"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:124
msgid ""
"Maximum number of iterations.  Iteration will stop after maxiter steps even "
"if the specified tolerance has not been achieved."
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:126
msgid "M"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:127
msgid ""
"Preconditioner for A.  The preconditioner should approximate the inverse of "
"A.  Effective preconditioning dramatically improves the rate of convergence,"
" which implies that fewer iterations are needed to reach a given error "
"tolerance."
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:131
msgid "callback"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst-1
msgid "function"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:132
msgid ""
"User-supplied function to call after each iteration.  It is called as "
"callback(xk), where xk is the current solution vector."
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:136
msgid "LinearOperator Class"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:138
msgid "common interface for performing matrix vector products"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:139
msgid ""
"useful abstraction that enables using dense and sparse matrices within the "
"solvers, as well as *matrix-free* solutions"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:141
msgid "has `shape` and `matvec()` (+ some optional parameters)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:142
msgid "example:"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:160
msgid "A Few Notes on Preconditioning"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:162
msgid "problem specific"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:163
msgid "often hard to develop"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:164
msgid "if not sure, try ILU"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:165
msgid "available in :mod:`scipy.sparse.linalg` as :func:`spilu()`"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:168
msgid "Eigenvalue Problem Solvers"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:171
msgid "The :mod:`eigen` module"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:173
msgid ""
"``arpack`` * a collection of Fortran77 subroutines designed to solve large "
"scale eigenvalue problems"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:176
msgid ""
"``lobpcg`` (Locally Optimal Block Preconditioned Conjugate Gradient Method) "
"* works very well in combination with `PyAMG "
"<https://github.com/pyamg/pyamg>`_ * example by Nathan Bell:"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:183
msgid ":download:`examples/pyamg_with_lobpcg.py`"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:185
msgid "example by Nils Wagner:"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:187
msgid ":download:`examples/lobpcg_sakurai.py`"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/solvers.rst:189
msgid "output::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:2
msgid "Storage Schemes"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:4
msgid "seven sparse array types in scipy.sparse:"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:5
msgid "csr_array: Compressed Sparse Row format"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:6
msgid "csc_array: Compressed Sparse Column format"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:7
msgid "bsr_array: Block Sparse Row format"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:8
msgid "lil_array: List of Lists format"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:9
msgid "dok_array: Dictionary of Keys format"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:10
msgid "coo_array: COOrdinate format (aka IJV, triplet format)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:11
msgid "dia_array: DIAgonal format"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:12
msgid "each suitable for some tasks"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:13
msgid "many employ sparsetools C++ module by Nathan Bell"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:14
msgid "assume the following is imported::"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:21
msgid "**warning** for Numpy users:"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:22
msgid ""
"passing a sparse array object to NumPy functions that expect ndarray/matrix "
"does not work. Use sparse functions."
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:24
msgid ""
"the older csr_matrix classes use '*' for matrix multiplication (dot product)"
" and 'A.multiply(B)' for elementwise multiplication."
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:26
msgid ""
"the newer csr_array uses '@' for dot product and '*' for elementwise "
"multiplication"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:27
msgid ""
"sparse arrays can be 1D or 2D, but not nD for n > 2 (unlike Numpy arrays)."
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:30
msgid "Common Methods"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:32
msgid "all scipy.sparse array classes are subclasses of :class:`sparray`"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:33
msgid "default implementation of arithmetic operations"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:34
msgid "always converts to CSR"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:35
msgid "subclasses override for efficiency"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:36
msgid "shape, data type, set/get"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:37
msgid "indices of nonzero values in the array"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:38
msgid "format conversion, interaction with NumPy (`toarray()`)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:40
msgid "attributes:"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:41
msgid "`mtx.T` - transpose (same as mtx.transpose())"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:42
msgid "`mtx.real` - real part of complex matrix"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:43
msgid "`mtx.imag` - imaginary part of complex matrix"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:44
msgid "`mtx.size` - the number of nonzeros (same as self.getnnz())"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:45
msgid "`mtx.shape` - the number of rows and columns (tuple)"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:46
msgid "data and indices usually stored in 1D NumPy arrays"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:49
msgid "Sparse Array Classes"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:65
msgid "Summary of storage schemes."
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:70
msgid "matrix * vector"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:71
msgid "get item"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:72
msgid "fancy get"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:73
msgid "set item"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:74
msgid "fancy set"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:75
msgid "solvers"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:76
msgid "note"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:77
msgid "CSR"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:78
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:86
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:94
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:102
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:110
msgid "sparsetools"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:79
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:80
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:87
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:88
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:119
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:120
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:121
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:122
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:127
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:129
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:130
msgid "yes"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:81
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:89
msgid "slow"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:82
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:90
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:95
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:96
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:97
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:98
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:103
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:104
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:105
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:106
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:111
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:112
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:113
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:114
msgid "."
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:83
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:91
msgid "any"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:84
msgid "has data array, fast row-wise ops"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:85
msgid "CSC"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:92
msgid "has data array, fast column-wise ops"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:93
msgid "BSR"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:99
msgid "specialized"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:100
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:116
msgid "has data array, specialized"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:101
msgid "COO"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:107
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:115
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:123
#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:131
msgid "iterative"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:108
msgid "has data array, facilitates fast conversion"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:109
msgid "DIA"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:117
msgid "LIL"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:118
msgid "via CSR"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:124
msgid "arithmetic via CSR, incremental construction"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:125
msgid "DOK"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:126
msgid "python"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:128
msgid "one axis only"
msgstr ""

#: ../../scientific-python-lectures/advanced/scipy_sparse/storage_schemes.rst:132
msgid "O(1) item access, incremental construction, slow arithmetic"
msgstr ""
